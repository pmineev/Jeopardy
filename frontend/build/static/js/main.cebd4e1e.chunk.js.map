{"version":3,"sources":["inputs.js","services.js","auth.js","registration.js","login.js","stores/GameSessionDescription.js","stores/GameSessionDescriptionStore.js","stores/GameDescription.js","stores/GameListStore.js","stores/GameListViewStore.js","utils.js","stores/AddGameStore.js","stores/AddGameViewStore.js","stores/GameSessionStore.js","stores/RootStore.js","games.js","header.js","notifiers.js","lobby.js","addGame.js","userProfile.js","game.js","App.js","reportWebVitals.js","index.js"],"names":["TextInput","label","props","useField","field","meta","className","htmlFor","name","style","visibility","touched","error","SubmitError","baseStaticURL","axios","defaults","baseURL","interceptors","request","use","config","url","access_token","localStorage","getItem","headers","response","status","console","log","Promise","reject","data","messages","token_type","clear","refresh_token","post","refresh","then","setItem","access","catch","AuthService","credentials","username","nickname","password","GameListService","get","LobbyService","AddGameService","game","Error","UserProfileService","length","patch","GameSessionService","gameName","max_players","game_name","game_session_id","delete","theme_order","question_order","answer","state","imageURL","authContext","createContext","authService","useAuth","useContext","ProvideAuth","children","auth","setUsername","register","message","login","isAuthenticated","getUsername","useProvideAuth","Provider","value","PrivateRoute","rest","render","location","to","pathname","from","RegisterForm","history","useHistory","document","title","initialValues","validationSchema","Yup","min","max","required","onSubmit","values","setSubmitting","setErrors","push","type","placeholder","LoginForm","GameSessionDescription","types","model","id","number","creator","string","maxPlayers","currentPlayers","actions","self","setPlayerJoined","setPlayerLeft","GameSessionDescriptionStore","descriptions","map","listener","event","init","addDescription","current_players","deleteDescription","initialize","forEach","descr","set","create","GameDescription","identifier","author","roundsCount","GameListStore","chosenGame","maybe","reference","rounds_count","setChosenGame","description","GameListViewStore","isCreateGameSessionFormOpen","toggleCreateGameSessionFormOpen","State","Object","freeze","WAITING","ROUND_STARTED","CHOOSING_QUESTION","ANSWERING","TIMEOUT","ROUND_ENDED","FINAL_ROUND_STARTED","FINAL_ROUND","END_GAME","toOrdinal","n","questionValues","Question","text","views","Theme","questions","array","Round","themes","addTheme","toString","Number","slice","lastIndexOf","AddGameStore","questionsCount","rounds","finalRound","selectedRound","selectedQuestion","setGameParams","i","setSelectedQuestion","question","previousRound","index","nextRound","setFinalRound","undefined","round","theme","isSet","AddGameViewStore","isAddGameFormOpen","isAddThemeFormOpen","isAddQuestionFormOpen","isAddFinalQuestionFormOpen","toggleAddGameFormOpen","toggleAddThemeFormOpen","toggleAddQuestionFormOpen","toggleAddFinalQuestionFormOpen","Player","score","integer","isPlaying","boolean","setIsPlaying","Answer","isCorrect","isAnswered","setText","CurrentQuestionIndexes","order","GameSessionStore","optional","enumeration","players","currentPlayer","currentRound","currentQuestion","safeReference","currentQuestionIndexes","finalQuestion","currentAnswer","roundText","player","find","is_playing","playerIndex","findIndex","splice","setCurrentPlayer","setCurrentRound","setCurrentQuestion","is_correct","notAnsweredQuestionsCount","playerData","pd","initializeCreated","initializeJoined","current_round","current_player","current_question","setState","setId","is_answered","clearCurrentAnswer","notAnswered","rootStore","gameSessionDescriptionStore","gameListStore","gameListViewStore","addGameStore","addGameViewStore","gameSessionStore","rootStoreContext","useStore","gameListService","gameSessionService","CreateGameSessionForm","observer","store","viewStore","onClick","GameList","useEffect","getDescriptions","result","overlayClassName","isOpen","onRequestClose","ariaHideApp","Header","activeClassName","Notifier","this","createUrl","ws","WebSocket","onmessage","JSON","parse","close","GameSessionDescriptionView","join","Lobby","notifier","setListener","size","addGameService","AddGameForm","typeError","AddThemeForm","AddQuestionForm","AddFinalQuestionForm","isAllRoundsFilled","isAllQuestionsFilled","storeSnapshot","getSnapshot","disabled","RoundsView","AddGame","userProfileService","UserProfileForm","useState","setCredentials","enableReinitialize","save","PlayerControls","resetForm","submit_answer","as","leave","HostCard","hostImageURL","hostText","get_host_image_url","themeName","winner","reduce","a","b","src","alt","QuestionScreen","includes","QuestionCell","clicked","setClicked","choose_question","RoundTable","GameScreen","PlayerCard","tooltipRef","setAnswer","wait","setTimeout","ReactTooltip","hide","show","data-tip","data-for","ref","get_avatar_url","effect","delayHide","getContent","Players","Game","gameSessionId","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cebd4e1e.chunk.js","sourcesContent":["import {useField} from \"formik\";\n\nconst TextInput = ({label, ...props}) => {\n    const [field, meta] = useField(props);\n\n    return (\n        <div className='form-group'>\n            <label htmlFor={props.name}> {label} </label>\n            <input className=\"text-input\" {...field} {...props} />\n            <div className=\"error\" style={{visibility: (meta.touched && meta.error) ? 'visible' : 'hidden'}}>\n                {meta.error || 'no error'} </div>\n        </div>\n    );\n};\n\nconst SubmitError = (name) => {\n    const [, meta] = useField(name);\n\n    return (\n        <div className='form-group'>\n            <div className=\"error\" style={{visibility: meta.error ? 'visible' : 'hidden'}}>\n                {meta.error || 'no error'} </div>\n        </div>\n    );\n};\n\nexport {TextInput, SubmitError};","import axios from 'axios';\n\nconst baseURL = 'http://127.0.0.1:8000/api';\nconst baseStaticURL = 'http://127.0.0.1:8000/static';\naxios.defaults.baseURL = baseURL;\n\naxios.interceptors.request.use(\n    config => {\n        if (!(config.url === '/sessions/')) {\n            const access_token = localStorage.getItem('access_token');\n            config.headers['Authorization'] = `Bearer ${access_token}`;\n        }\n\n        return config;\n    }\n);\n\naxios.interceptors.response.use(\n    response => {\n        return response;\n    },\n    error => {\n        if (error.response.status !== 401\n            || error.config.url === '/sessions/') {\n            console.log(error);\n            return Promise.reject(error);\n        }\n\n        if (error.response.data.messages?.[0].token_type !== 'access') {\n            localStorage.clear();\n            return Promise.reject(error);\n        } else {\n            const refresh_token = localStorage.getItem('refresh_token');\n            if (refresh_token) {\n                axios.post('/sessions/new_token/', {\n                    refresh: refresh_token\n                })\n                    .then(response => {\n                        localStorage.setItem('access_token', response.data.access)\n                    })\n                    .catch(error => {\n                        console.log(error)\n                    });\n                return axios.request(error.config);\n            } else {\n\n            }\n        }\n\n        console.log(error.response);\n\n    }\n);\n\n\nclass AuthService {\n\n    register(credentials) {\n        const url = '/users/';\n        return axios.post(url, {\n            username: credentials.username,\n            nickname: credentials.nickname,\n            password: credentials.password\n        })\n            .then(response => {\n                localStorage.setItem('access_token', response.data.access);\n                localStorage.setItem('refresh_token', response.data.refresh);\n                return response.status;\n            })\n            .catch(error => {\n                return error.response.status;\n            });\n    }\n\n    login(credentials) {\n        const url = '/sessions/';\n        return axios\n            .post(url, {\n                username: credentials.username,\n                password: credentials.password\n            })\n            .then(response => {\n                localStorage.setItem('access_token', response.data.access);\n                localStorage.setItem('refresh_token', response.data.refresh);\n                return response.status;\n            })\n            .catch(error => {\n                return error.response.status;\n            });\n    }\n\n}\n\nclass GameListService {\n    getDescriptions() {\n        const url = '/games/';\n        return axios.get(url);\n    }\n}\n\nclass LobbyService {\n    getDescriptions() {\n        const url = '/game_sessions/';\n        return axios.get(url);\n    }\n}\n\nclass AddGameService {\n    post(game) {\n        const url = '/games/';\n\n        return axios.post(url, game)\n            .catch(error => {\n                if (error.response.status === 409)\n                    return Promise.reject(new Error('Игра с таким названием уже существует'))\n            });\n    }\n}\n\nclass UserProfileService {\n    get(username) {\n        const url = `/users/${username}/`;\n        return axios.get(url);\n    }\n\n    save(username, nickname, password) {\n        const url = `/users/${username}/`;\n\n        let data = {};\n        if (nickname && nickname.length > 0)\n            data.nickname = nickname\n        if (password && password.length > 0)\n            data.password = password\n\n        return axios.patch(url, data);\n    }\n}\n\nclass GameSessionService {\n    create(gameName, max_players) {\n        const url = '/game_sessions/';\n        console.log('create');\n        return axios.post(url, {\n            game_name: gameName,\n            max_players: max_players\n        })\n    }\n\n    join(game_session_id) {\n        const url = `game_sessions/chosen/${game_session_id}/`;\n        return axios.post(url);\n    }\n\n    leave(game_session_id) {\n        const url = `game_sessions/exited/${game_session_id}/`;\n        axios.delete(url);\n    }\n\n    choose_question(game_session_id, theme_order, question_order) {\n        const url = `game_sessions/${game_session_id}/question/`;\n        axios.post(url, {\n            theme_order: theme_order,\n            question_order: question_order\n        })\n            .catch(error => console.log(error));\n    }\n\n    submit_answer(game_session_id, answer) {\n        const url = `game_sessions/${game_session_id}/answer/`;\n        axios.post(url, {answer: answer});\n    }\n\n    get_host_image_url(state) {\n        const imageURL = baseStaticURL + '/img/kuleshov/' + state + '.jpg';\n        console.log(imageURL);\n        return imageURL;\n    }\n\n    get_avatar_url() {\n        const imageURL = baseStaticURL + '/img/avatar.png';\n        console.log(imageURL);\n        return imageURL;\n    }\n}\n\nexport {AuthService, GameListService, LobbyService, AddGameService, UserProfileService, GameSessionService};","import React, {createContext, useContext} from \"react\";\nimport {Redirect, Route} from \"react-router-dom\";\nimport {AuthService} from \"./services\";\n\nconst authContext = createContext({});\nconst authService = new AuthService();\n\nfunction useAuth() {\n    return useContext(authContext);\n}\n\nfunction useProvideAuth() {\n\n    function setUsername(username) {\n        localStorage.setItem('username', username);\n    }\n\n    function getUsername() {\n        return localStorage.getItem('username');\n    }\n\n    function register(credentials) {\n        return authService.register(credentials)\n            .then(status => {\n                if (status < 400) {\n                    setUsername(credentials.username);\n                    return;\n                }\n\n                let message;\n                switch (status) {\n                    case 409:\n                        message = 'Пользователь уже существует';\n                        break;\n\n                    case 401:\n                        message = 'Неверные данные';\n                        break;\n\n                    default:\n                        message = 'Ошибка';\n                }\n                return Promise.reject(new Error(message))\n\n            })\n    }\n\n    function login(credentials) {\n        return authService.login(credentials)\n            .then(status => {\n                if (status < 400) {\n                    setUsername(credentials.username);\n                    return;\n                }\n\n                let message;\n                switch (status) {\n                    case 401:\n                        message = 'Неверные данные';\n                        break;\n\n                    default:\n                        message = 'Ошибка';\n                }\n                return Promise.reject(new Error(message))\n\n            })\n    }\n\n    function isAuthenticated() {\n        return localStorage.getItem('access_token') !== null;\n    }\n\n    return {\n        register,\n        login,\n        isAuthenticated,\n        getUsername\n    };\n}\n\nfunction ProvideAuth({children}) {\n    const auth = useProvideAuth();\n    return (\n        <authContext.Provider value={auth}>\n            {children}\n        </authContext.Provider>\n    );\n}\n\n\nfunction PrivateRoute({children, ...rest}) {\n    const auth = useAuth();\n    return (\n        <Route\n            {...rest}\n            render={({location}) =>\n                auth.isAuthenticated() ? (\n                    children\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: \"/login\",\n                            state: {from: location}\n                        }}\n                    />\n                )\n            }\n        />\n    );\n}\n\nexport {useAuth, ProvideAuth, PrivateRoute};","import {Form, Formik} from \"formik\";\nimport * as Yup from \"yup\";\nimport {SubmitError, TextInput} from \"./inputs\";\nimport {useAuth} from \"./auth\";\nimport {Link, useHistory} from \"react-router-dom\";\n\nconst RegisterForm = () => {\n    const auth = useAuth();\n    const history = useHistory();\n\n    document.title = 'Регистрация'\n\n    return (\n        <div className='form'>\n            <Formik\n                initialValues={{\n                    username: '',\n                    nickname: '',\n                    password: '',\n                }}\n                validationSchema={Yup.object({\n                    username: Yup.string()\n                        .min(2, 'Не менее 2 символов')\n                        .max(25, 'Не более 25 символов')\n                        .required('Обязательное поле'),\n                    nickname: Yup.string()\n                        .min(2, 'Не менее 2 символов')\n                        .max(25, 'Не более 25 символов'),\n                    password: Yup.string()\n                        .min(6, 'Не менее 6 символов')\n                        .max(128, 'Не более 128 символов')\n                        .required('Обязательное поле')\n                })}\n                onSubmit={(values, {setSubmitting, setErrors}) => {\n                    auth.register(values)\n                        .then(() => {\n                            console.log('зареган');\n                            setSubmitting(false);\n                            history.push('/games');\n                        })\n                        .catch(error => {\n                            setErrors({'submitError': error.message});\n                        })\n                }}\n            >\n                <Form>\n                    <header>Регистрация</header>\n                    <TextInput\n                        label=\"Имя пользователя\"\n                        name=\"username\"\n                        type=\"text\"\n                    />\n                    <TextInput\n                        label=\"Ник\"\n                        name=\"nickname\"\n                        type=\"text\"\n                        placeholder='Необязательно'\n                    />\n                    <TextInput\n                        label=\"Пароль\"\n                        name=\"password\"\n                        type=\"password\"\n                    />\n\n                    <SubmitError name='submitError'/>\n\n                    <Link to='/login'>Уже зарегистрированы?</Link>\n\n                    <button type=\"submit\">Зарегистрировать</button>\n                </Form>\n            </Formik>\n        </div>\n    );\n};\n\nexport {RegisterForm};","import {Form, Formik} from \"formik\";\nimport * as Yup from \"yup\";\nimport {SubmitError, TextInput} from \"./inputs\";\nimport {useAuth} from \"./auth\";\nimport {Link, useHistory} from \"react-router-dom\";\n\nconst LoginForm = () => {\n    const auth = useAuth();\n    const history = useHistory();\n\n    document.title = 'Вход';\n\n    return (\n        <div className='form'>\n            <Formik\n                initialValues={{\n                    username: '',\n                    password: '',\n                }}\n                validationSchema={Yup.object({\n                    username: Yup.string()\n                        .required('Обязательное поле'),\n                    password: Yup.string()\n                        .required('Обязательное поле')\n                })}\n                onSubmit={(values, {setSubmitting, setErrors}) => {\n                    auth.login(values)\n                        .then(() => {\n                            setSubmitting(false);\n                            history.push('/games');\n                        })\n                        .catch(error => {\n                            setErrors({'submitError': error.message});\n                        })\n                }}\n            >\n                <Form>\n                    <header>Вход</header>\n                    <TextInput\n                        label=\"Имя пользователя\"\n                        name=\"username\"\n                        type=\"text\"\n                    />\n                    <TextInput\n                        label=\"Пароль\"\n                        name=\"password\"\n                        type=\"password\"\n                    />\n\n                    <SubmitError name='submitError'/>\n\n                    <Link to='/register'>Еще не зарегистрированы?</Link>\n\n                    <button type=\"submit\">Войти</button>\n                </Form>\n            </Formik>\n        </div>\n    );\n};\n\nexport default LoginForm;","import {types} from \"mobx-state-tree\";\n\nconst GameSessionDescription = types\n    .model({\n        id: types.number,\n        creator: types.string,\n        gameName: types.string,\n        maxPlayers: types.number,\n        currentPlayers: types.number\n\n    })\n    .actions(self => ({\n        setPlayerJoined() {\n            self.currentPlayers += 1;\n        },\n        setPlayerLeft() {\n            self.currentPlayers -= 1;\n        }\n    }))\n\nexport default GameSessionDescription;","import {types} from \"mobx-state-tree\";\n\nimport GameSessionDescription from \"./GameSessionDescription\";\n\nconst GameSessionDescriptionStore = types\n    .model({\n        descriptions: types.map(GameSessionDescription)\n    })\n    .actions(self => ({\n        listener(event, data) {\n            switch (event) {\n                case 'init': {\n                    self.init(data);\n                    break;\n                }\n                case 'game_session_created': {\n                    self.addDescription(data.id, data.creator, data.game_name, data.max_players, data.current_players);\n                    break;\n                }\n                case 'game_session_deleted': {\n                    self.deleteDescription(data.id);\n                    break;\n                }\n                case 'player_joined': {\n                    self.descriptions.get(data.id).setPlayerJoined();\n                    break;\n                }\n                case 'player_left': {\n                    console.log(self.descriptions)\n                    let descr = self.descriptions.get(data.id);\n                    if (descr) {\n                        self.descriptions.get(data.id).setPlayerLeft();\n                    }\n                    console.log(self.descriptions)\n                    break;\n                }\n                default:\n                    throw new Error('нет такого события')\n            }\n        },\n        initialize(data) {\n            data.forEach(descr =>\n                self.addDescription(\n                    descr.id,\n                    descr.creator,\n                    descr.game_name,\n                    descr.max_players,\n                    descr.current_players))\n        },\n        addDescription(id, creator, gameName, maxPlayers, currentPlayers) {\n            self.descriptions.set(id, GameSessionDescription.create({\n                id, creator, gameName, maxPlayers, currentPlayers\n            }))\n        },\n        deleteDescription(id) {\n            self.descriptions.delete(id);\n        }\n    }))\n\nexport default GameSessionDescriptionStore;","import {types} from \"mobx-state-tree\";\n\nconst GameDescription = types\n    .model({\n        id: types.identifier,\n        name: types.string,\n        author: types.string,\n        roundsCount: types.number\n    })\n\nexport default GameDescription;","import {types} from \"mobx-state-tree\";\n\nimport GameDescription from \"./GameDescription\";\n\nconst GameListStore = types\n    .model({\n        descriptions: types.map(GameDescription),\n        chosenGame: types.maybe(types.reference(GameDescription))\n    })\n    .actions(self => ({\n        set(data) {\n            data.forEach(descr => {\n                self.addDescription(\n                    descr.name,\n                    descr.name,\n                    descr.author,\n                    descr.rounds_count)\n            });\n        },\n        addDescription(id, name, author, roundsCount) {\n            self.descriptions.set(id, GameDescription.create({\n                id, name, author, roundsCount\n            }))\n        },\n        setChosenGame(description) {\n            self.chosenGame = description;\n        }\n    }))\n\nexport default GameListStore;","import {types} from \"mobx-state-tree\";\n\nconst GameListViewStore = types\n    .model({\n        isCreateGameSessionFormOpen: false\n    })\n    .actions(self => ({\n        toggleCreateGameSessionFormOpen() {\n            self.isCreateGameSessionFormOpen = !self.isCreateGameSessionFormOpen;\n        }\n    }))\n\nexport default GameListViewStore;","const State = Object.freeze({\n    WAITING: 'WAITING',\n    ROUND_STARTED: 'ROUND_STARTED',\n    CHOOSING_QUESTION: 'CHOOSING_QUESTION',\n    ANSWERING: 'ANSWERING',\n    TIMEOUT: 'TIMEOUT',\n    ROUND_ENDED: 'ROUND_ENDED',\n    FINAL_ROUND_STARTED: 'FINAL_ROUND_STARTED',\n    FINAL_ROUND: 'FINAL_ROUND',\n    END_GAME: 'END_GAME'\n})\n\nfunction toOrdinal(n) {\n    const ordinals = ['Нулевой',\n        'Первый',\n        'Второй',\n        'Третий',\n        'Четвертый',\n        'Пятый',\n        'Шестой',\n        'Седьмой',\n        'Восьмой',\n        'Девятый'\n    ]\n\n    return ordinals[n];\n}\n\nconst questionValues = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000];\n\nexport {State, toOrdinal, questionValues}","import {types} from \"mobx-state-tree\";\n\nimport {questionValues} from \"../utils\";\n\nconst Question = types\n    .model({\n        id: types.identifier,\n        value: types.number,\n        text: types.maybe(types.string),\n        answer: types.maybe(types.string)\n    })\n    .actions(self => ({\n        set(text, answer) {\n            self.text = text;\n            self.answer = answer\n        }\n    }))\n    .views(self => ({\n        get isSet() {\n            return !!self.text;\n        }\n    }));\n\nconst Theme = types\n    .model({\n        name: types.string,\n        questions: types.array(Question)\n    });\n\nconst Round = types\n    .model({\n        id: types.identifier,\n        themes: types.array(Theme),\n        questionValues: types.array(types.number)\n    })\n    .actions(self => ({\n        addTheme(name) {\n            self.themes.push(Theme.create({\n                name,\n                questions: self.questionValues.map(value => (\n                    Question.create({\n                        id: self.id.toString() + name + value.toString(),\n                        value\n                    })\n                ))\n            }))\n        }\n    }))\n    .views(self => ({\n        get index() {\n            return Number(self.id.slice(self.id.lastIndexOf('_') + 1));\n        }\n    }));\n\nconst AddGameStore = types\n    .model({\n        name: types.maybe(types.string),\n        roundsCount: types.maybe(types.number),\n        questionsCount: types.maybe(types.number),\n        rounds: types.array(Round),\n        finalRound: types.maybe(Question),\n        selectedRound: types.maybe(types.reference(Round)),\n        selectedQuestion: types.maybe(types.reference(Question))\n    })\n    .actions(self => ({\n        setGameParams(name, roundsCount, questionsCount) {\n            self.name = name;\n            self.roundsCount = roundsCount;\n            self.questionsCount = questionsCount;\n\n            for (let i = 0; i < self.roundsCount - 1; i++) {\n                self.rounds[i] = Round.create({\n                    id: self.name + '_' + i.toString(),\n                    questionValues: questionValues\n                        .slice(0, self.questionsCount)\n                        .map(value => value * (i + 1))\n                })\n            }\n\n            self.finalRound = Question.create({\n                id: 'final',\n                value: 200 * self.roundsCount * self.questionsCount\n            })\n\n            self.selectedRound = self.rounds[0];\n        },\n        setSelectedQuestion(question) {\n            self.selectedQuestion = question;\n        },\n        previousRound() {\n            self.selectedRound = self.rounds[self.selectedRound.index - 1];\n        },\n        nextRound() {\n            self.selectedRound = self.rounds[self.selectedRound.index + 1];\n        },\n        setFinalRound(text, answer) {\n            self.finalRound.set(text, answer)\n        },\n        clear() {\n            self.name = undefined;\n            self.roundsCount = undefined;\n            self.roundsCount = undefined;\n            self.rounds = [];\n            self.finalRound = undefined;\n            self.selectedRound = undefined;\n            self.selectedQuestion = undefined;\n        }\n    }))\n    .views(self => ({\n        get isAllRoundsFilled() {\n            for (const round of self.rounds) {\n                if (round.themes.length === 0) {\n                    return false;\n                }\n            }\n            return true;\n        },\n        get isAllQuestionsFilled() {\n            for (const round of self.rounds) {\n                for (const theme of round.themes) {\n                    for (const question of theme.questions) {\n                        if (!question.isSet) {\n                            return false;\n                        }\n                    }\n                }\n            }\n            return true;\n        }\n    }));\n\nexport default AddGameStore;","import {types} from \"mobx-state-tree\";\n\nconst AddGameViewStore = types\n    .model({\n        isAddGameFormOpen: true,\n        isAddThemeFormOpen: false,\n        isAddQuestionFormOpen: false,\n        isAddFinalQuestionFormOpen: false\n    })\n    .actions(self => ({\n        toggleAddGameFormOpen() {\n            self.isAddGameFormOpen = !self.isAddGameFormOpen;\n        },\n        toggleAddThemeFormOpen() {\n            self.isAddThemeFormOpen = !self.isAddThemeFormOpen;\n        },\n        toggleAddQuestionFormOpen() {\n            self.isAddQuestionFormOpen = !self.isAddQuestionFormOpen;\n        },\n        toggleAddFinalQuestionFormOpen() {\n            self.isAddFinalQuestionFormOpen = !self.isAddFinalQuestionFormOpen;\n        },\n        clear() {\n            self.isAddGameFormOpen = true;\n            self.isAddThemeFormOpen = false;\n            self.isAddQuestionFormOpen = false;\n            self.isAddFinalQuestionFormOpen = false;\n        }\n    }))\n\nexport default AddGameViewStore;","import {types} from \"mobx-state-tree\";\nimport {State, toOrdinal} from \"../utils\";\n\nconst Player = types\n    .model({\n        nickname: types.identifier,\n        score: types.integer,\n        isPlaying: types.boolean,\n        answer: types.maybe(types.string)\n    })\n    .actions(self => ({\n        setIsPlaying(isPlaying) {\n            self.isPlaying = isPlaying;\n        }\n    }));\n\nconst Answer = types\n    .model({\n        text: '',\n        isCorrect: false\n    });\n\nconst Question = types\n    .model({\n        id: types.identifier,\n        value: types.integer,\n        text: types.maybe(types.string),\n        isAnswered: types.boolean\n    })\n    .actions(self => ({\n        setText(text) {\n            self.text = text;\n        }\n    }));\n\nconst CurrentQuestionIndexes = types\n    .model({\n        theme: types.number,\n        question: types.number\n    });\n\nconst Theme = types\n    .model({\n        name: types.string,\n        questions: types.array(Question)\n    });\n\nconst Round = types\n    .model({\n        order: types.integer,\n        themes: types.array(Theme)\n    });\n\nconst GameSessionStore = types\n    .model({\n        id: types.maybe(types.number),\n        state: types.optional(types.enumeration('state', Object.values(State)), State.WAITING),\n        players: types.array(Player),\n        currentPlayer: types.maybe(types.reference(Player)),\n        currentRound: types.maybe(Round),\n        currentQuestion: types.maybe(types.safeReference(Question)),\n        currentQuestionIndexes: types.optional(CurrentQuestionIndexes, {\n            theme: -1,\n            question: -1\n        }),\n        finalQuestion: types.maybe(Question),\n        currentAnswer: types.maybe(Answer),\n        roundText: ''\n\n    })\n    .actions(self => ({\n        listener(event, data) {\n            switch (event) {\n                case 'player_joined': {\n                    const player = self.players.find(player => player.nickname === data.nickname);\n\n                    if (player)\n                        player.setIsPlaying(true);\n                    else\n                        self.players.push({\n                            nickname: data.nickname,\n                            score: data.score,\n                            isPlaying: data.is_playing\n                        });\n\n                    break;\n                }\n                case 'player_left': {\n                    const playerIndex = self.players.findIndex(player => player.nickname === data.nickname);\n\n                    if (self.state === State.WAITING)\n                        self.players.splice(playerIndex, 1);\n                    else\n                        self.players[playerIndex].isPlaying = false;\n\n                    break;\n                }\n                case 'current_player_chosen': {\n                    self.setCurrentPlayer(data);\n\n                    break;\n                }\n                case 'round_started': {\n                    console.log(data);\n                    self.setCurrentRound(data);\n                    self.roundText = toOrdinal(self.currentRound.order + 1) + ' раунд';\n                    self.state = self.currentRound.order > 0 ? State.ROUND_ENDED : State.ROUND_STARTED;\n\n                    break;\n                }\n                case 'current_question_chosen': {\n                    self.setCurrentQuestion(data);\n\n                    self.state = State.ANSWERING;\n\n                    break;\n                }\n                case 'player_answered': {\n                    self.currentAnswer = Answer.create({\n                        text: data.text,\n                        isCorrect: data.is_correct\n                    });\n\n                    const player = self.players.find(player => player.nickname === data.player.nickname);\n\n                    self.currentPlayer = player;\n\n                    player.score = data.player.score;\n\n                    if (self.currentAnswer.isCorrect) {\n                        self.currentRound\n                            .themes[self.currentQuestionIndexes.theme]\n                            .questions[self.currentQuestionIndexes.question]\n                            .isAnswered = true;\n\n\n                        if (self.notAnsweredQuestionsCount !== 1)\n                            self.state = State.CHOOSING_QUESTION;\n                    }\n\n                    break;\n                }\n                case 'question_timeout': {\n                    self.currentQuestion.isAnswered = true;\n                    self.currentAnswer = Answer.create({\n                        text: data.text,\n                        isCorrect: true\n                    });\n                    self.state = State.TIMEOUT;\n\n                    break;\n                }\n                case 'final_round_started': {\n                    self.finalQuestion = Question.create({\n                        id: 'final',\n                        value: data.value,\n                        text: data.text,\n                        isAnswered: false\n                    })\n                    self.currentQuestion = self.finalQuestion;\n\n                    self.state = State.FINAL_ROUND_STARTED;\n\n                    break;\n                }\n                case 'final_round_timeout': {\n                    self.players.forEach(player => {\n                        const playerData = data.players.find(pd => pd.nickname === player.nickname);\n                        player.score = playerData.score;\n                        player.answer = playerData.answer ?? undefined;\n                    })\n                    self.state = State.END_GAME;\n\n                    break;\n                }\n                default:\n                    throw new Error('нет такого события');\n            }\n        },\n        initializeCreated(data) {\n            self.id = Number(data.id);\n            self.players.push({\n                nickname: data.players[0].nickname,\n                score: data.players[0].score,\n                isPlaying: data.players[0].is_playing\n            })\n        },\n        initializeJoined(data) {\n            self.state = data.state;\n            data.players.forEach(player =>\n                self.players.push({\n                    nickname: player.nickname,\n                    score: player.score,\n                    isPlaying: player.is_playing\n                })\n            );\n            self.setCurrentRound(data.current_round);\n            self.setCurrentPlayer(data.current_player);\n            self.setCurrentQuestion(data.current_question);\n        },\n        setState(state) {\n            self.state = state;\n        },\n        setId(id) {\n            self.id = id;\n        },\n        setCurrentRound(data) {\n            self.currentRound = Round.create({\n                order: data.order,\n                themes: data.themes.map(theme => (\n                    Theme.create({\n                        name: theme.name,\n                        questions: theme.questions.map(question => (\n                            Question.create({\n                                id: theme.name + question.value,\n                                value: question.value,\n                                isAnswered: question.is_answered\n                            })\n                        ))\n                    })\n                ))\n            });\n        },\n        setCurrentPlayer(data) {\n            self.currentPlayer = self.players.find(player => player.nickname === data.nickname);\n        },\n        setCurrentQuestion(data) {\n            if (data) {\n                self.currentQuestion = self.currentRound\n                    .themes[data.theme_order]\n                    .questions[data.question_order];\n                self.currentQuestion.setText(data.text);\n\n                self.currentQuestionIndexes.theme = data.theme_order\n                self.currentQuestionIndexes.question = data.question_order\n            }\n        },\n        clearCurrentAnswer() {\n            self.currentAnswer = undefined;\n        }\n    }))\n    .views(self => ({\n        get notAnsweredQuestionsCount() {\n            let notAnswered = 0;\n\n            self.currentRound.themes.forEach(theme => {\n                theme.questions.forEach(question => {\n                    if (!question.isAnswered)\n                        notAnswered++;\n                })\n            })\n\n            return notAnswered;\n        }\n    }));\n\nexport default GameSessionStore;","import {createContext, useContext} from \"react\";\nimport {types} from \"mobx-state-tree\";\n\nimport GameSessionDescriptionStore from \"./GameSessionDescriptionStore\";\nimport GameListStore from \"./GameListStore\";\nimport GameListViewStore from \"./GameListViewStore\";\nimport AddGameStore from \"./AddGameStore\";\nimport AddGameViewStore from \"./AddGameViewStore\";\nimport GameSessionStore from \"./GameSessionStore\";\n\nconst RootStore = types\n    .model({\n        gameSessionDescriptionStore: GameSessionDescriptionStore,\n        gameListStore: GameListStore,\n        gameListViewStore: GameListViewStore,\n        addGameStore: AddGameStore,\n        addGameViewStore: AddGameViewStore,\n        gameSessionStore: GameSessionStore\n    });\n\nlet rootStore = RootStore.create({\n    gameSessionDescriptionStore: GameSessionDescriptionStore.create(),\n    gameListStore: GameListStore.create(),\n    gameListViewStore: GameListViewStore.create(),\n    addGameStore: AddGameStore.create(),\n    addGameViewStore: AddGameViewStore.create(),\n    gameSessionStore: GameSessionStore.create()\n});\n\nlet rootStoreContext = createContext(rootStore);\n\nconst RootStoreProvider = rootStoreContext.Provider;\n\nconst useStore = () => {\n    return useContext(rootStoreContext);\n}\n\nexport {RootStoreProvider, useStore};\n\n","import './list.css';\n\nimport {useEffect} from 'react'\nimport {useHistory} from \"react-router-dom\";\nimport {Form, Formik} from \"formik\";\nimport * as Yup from \"yup\";\nimport Modal from \"react-modal\";\nimport {values} from 'mobx';\nimport {observer} from \"mobx-react-lite\";\n\nimport {GameListService, GameSessionService} from \"./services\";\nimport {TextInput} from \"./inputs\";\nimport {useStore} from \"./stores/RootStore\";\n\nconst gameListService = new GameListService();\nconst gameSessionService = new GameSessionService();\n\nconst CreateGameSessionForm = observer(({history}) => {\n    const {gameListStore: store, gameListViewStore: viewStore, gameSessionStore} = useStore();\n\n    return (\n        <Formik\n            initialValues={{\n                maxPlayers: '2'\n            }}\n            validationSchema={Yup.object({\n                maxPlayers: Yup.number()\n                    .required('Обязательное поле')\n                    .min(2, 'Не менее 2 игроков')\n                    .max(10, 'Не более 10 игроков')\n            })}\n            onSubmit={(values, {setSubmitting}) => {\n                gameSessionService.create(store.chosenGame.name, values.maxPlayers)\n                    .then(response => {\n                        gameSessionStore.initializeCreated(response.data);\n                        localStorage.setItem('gameSessionId', response.data.id)\n\n                        setSubmitting(false);\n                        viewStore.toggleCreateGameSessionFormOpen();\n                        history.push('/game')\n                    })\n            }}\n        >\n            <Form>\n                <header>Новая игра</header>\n                <TextInput\n                    label=\"Количество игроков\"\n                    name=\"maxPlayers\"\n                    type=\"text\"\n                />\n\n                <button type=\"submit\">Начать игру</button>\n            </Form>\n        </Formik>\n    );\n});\n\nconst GameDescription = observer((props) => {\n    const {gameListStore: store, gameListViewStore: viewStore} = useStore();\n\n    return (\n        <tr>\n            <td>{props.descr.author}</td>\n            <td>{props.descr.name}</td>\n            <td>{props.descr.roundsCount}</td>\n            <td>\n                <button\n                    onClick={() => {\n                        viewStore.toggleCreateGameSessionFormOpen();\n                        store.setChosenGame(props.descr);\n                    }}\n                >\n                    Играть\n                </button>\n            </td>\n        </tr>\n    );\n});\n\nconst GameList = observer(() => {\n    const history = useHistory();\n    const {gameListStore: store, gameListViewStore: viewStore} = useStore();\n\n    useEffect(() => {\n        document.title = 'Игры';\n\n        gameListService.getDescriptions()\n            .then(result => {\n                store.set(result.data);\n            });\n    }, [store])\n\n    return (\n        <div className='games'>\n            <header>Игры</header>\n\n            <table className=\"list games-table\">\n                <thead key=\"games-table-head\">\n                <tr>\n                    <th>Автор</th>\n                    <th>Название</th>\n                    <th>Раунды</th>\n                </tr>\n                </thead>\n                <tbody>\n                {values(store.descriptions).map(descr =>\n                    <GameDescription\n                        key={descr.id}\n                        descr={descr}\n                    />\n                )}\n                </tbody>\n            </table>\n\n            <button onClick={() => history.push('/games/new')}>Создать новую игру</button>\n\n\n            <Modal\n                className='modal form create-game-session'\n                overlayClassName='overlay'\n                isOpen={viewStore.isCreateGameSessionFormOpen}\n                onRequestClose={viewStore.toggleCreateGameSessionFormOpen}\n                ariaHideApp={false}\n            >\n                <CreateGameSessionForm\n                    history={history}\n                />\n            </Modal>\n        </div>\n    );\n});\n\nexport default GameList;","import './header.css';\nimport {Link, NavLink} from \"react-router-dom\";\nimport {useAuth} from \"./auth\";\n\nfunction Header() {\n    const auth = useAuth();\n    const username = auth.getUsername();\n\n    return (\n        <header className=\"nav\">\n            <nav>\n                <NavLink to='/games' activeClassName='active'>Игры</NavLink>\n                <NavLink to='/lobby' activeClassName='active'>Лобби</NavLink>\n            </nav>\n            <Link to='/user'>{username}</Link>\n        </header>\n    );\n}\n\nexport default Header","class Notifier {\n    constructor(type, id = '') {\n        this.url = Notifier.createUrl(type, id);\n        this.listener = null;\n\n        this.ws = new WebSocket(this.url);\n    }\n\n    static createUrl(type, id) {\n        switch (type) {\n            case 'lobby':\n                return 'ws://127.0.0.1:8000/ws/lobby/'\n            case 'game':\n                return `ws://127.0.0.1:8000/ws/game_sessions/${id}/`\n            default:\n                throw new Error('нет такого типа уведомлений')\n        }\n    }\n\n    setListener(listener) {\n        this.listener = listener;\n\n        this.ws.onmessage = (message) => {\n            const data = JSON.parse(message.data);\n            console.log('ws', data);\n            this.listener(data.event, data.data);\n        }\n    }\n\n    close() {\n        console.log('ws close');\n        this.ws.close();\n    }\n\n}\n\nexport default Notifier;","import './list.css';\n\nimport {useEffect} from 'react';\nimport {useHistory} from \"react-router-dom\";\nimport {values} from 'mobx';\nimport {observer} from \"mobx-react-lite\";\n\nimport {GameSessionService, LobbyService} from \"./services\";\nimport Notifier from \"./notifiers\";\nimport {useStore} from \"./stores/RootStore\";\n\nconst gameSessionService = new GameSessionService();\n\nconst GameSessionDescriptionView = observer(({descr, history}) => {\n    const {gameSessionStore} = useStore();\n\n    return (\n        <tr>\n            <td>{descr.creator}</td>\n            <td>{descr.gameName}</td>\n            <td>{descr.currentPlayers}/{descr.maxPlayers}</td>\n            <td>\n                <button\n                    onClick={() => {\n                        gameSessionService.join(descr.id)\n                            .then(response =>\n                                gameSessionStore.initializeJoined(response.data));\n\n                        localStorage.setItem('gameSessionId', descr.id)\n                        history.push('/game');\n                    }}\n                >\n                    Играть\n                </button>\n            </td>\n        </tr>\n    );\n});\n\nconst Lobby = observer(() => {\n    // const [gameDescriptions, dispatch] = useReducer(reducer, []);\n    const history = useHistory();\n    const {gameSessionDescriptionStore: store} = useStore();\n\n    useEffect(() => {\n        document.title = 'Лобби'\n\n        const notifier = new Notifier('lobby');\n        notifier.setListener(store.listener);\n\n        const lobbyService = new LobbyService();\n        lobbyService.getDescriptions()\n            .then(result => {\n                store.initialize(result.data);\n            });\n\n        return () => notifier.close()\n    }, [store]);\n\n    return (\n        <div className='lobby'>\n            <header>Лобби</header>\n\n            <table className=\"list lobby-table\">\n                <thead key=\"lobby-table-head\">\n                <tr>\n                    <th>Создатель</th>\n                    <th>Название</th>\n                    <th>Игроки</th>\n                </tr>\n                </thead>\n                <tbody>\n                {store.descriptions.size > 0 && values(store.descriptions).map(descr =>\n                    <GameSessionDescriptionView\n                        key={descr.creator}\n                        descr={descr}\n                        history={history}\n                    />\n                )}\n                </tbody>\n            </table>\n        </div>\n    );\n});\n\nexport default Lobby;","import './round.css';\n\nimport {useEffect} from \"react\";\nimport {useHistory} from 'react-router-dom';\nimport {Form, Formik} from \"formik\";\nimport * as Yup from \"yup\";\nimport Modal from \"react-modal\";\nimport {observer} from \"mobx-react-lite\";\nimport {getSnapshot} from \"mobx-state-tree\";\n\nimport {AddGameService} from \"./services\";\nimport {SubmitError, TextInput} from \"./inputs\";\nimport {toOrdinal} from \"./utils\";\nimport {useStore} from \"./stores/RootStore\";\n\nconst addGameService = new AddGameService();\n\nconst AddGameForm = observer(() => {\n    const {addGameStore: store, addGameViewStore: viewStore} = useStore();\n\n    return (\n        <div className='form'>\n            <Formik\n                initialValues={{\n                    name: '',\n                    roundsCount: '3',\n                    questionsCount: '5',\n                }}\n                validationSchema={Yup.object({\n                    name: Yup.string()\n                        .required('Обязательное поле'),\n                    roundsCount: Yup.number()\n                        .required('Обязательное поле')\n                        .min(2, 'Не менее 2 раундов')\n                        .max(10, 'Не более 10 раундов')\n                        .typeError('Введите число')\n                        .integer('Так тоже не прокатит'),\n                    questionsCount: Yup.number()\n                        .required('Обязательное поле')\n                        .min(1, 'Не менее 1 вопроса')\n                        .max(10, 'Не более 10 вепросов')\n                        .typeError('Введите число')\n                        .integer('Так тоже не прокатит')\n                })}\n                onSubmit={(values, {setSubmitting}) => {\n                    setSubmitting(false);\n                    store.setGameParams(\n                        values.name,\n                        Number(values.roundsCount),\n                        Number(values.questionsCount)\n                    );\n                    viewStore.toggleAddGameFormOpen();\n                }}\n            >\n                <Form>\n                    <header>Новая игра</header>\n                    <TextInput\n                        label=\"Название\"\n                        name=\"name\"\n                        type=\"text\"\n                    />\n                    <TextInput\n                        label=\"Количество раундов\"\n                        name=\"roundsCount\"\n                        type=\"text\"\n                    />\n                    <TextInput\n                        label=\"Количество вопросов в теме\"\n                        name=\"questionsCount\"\n                        type=\"text\"\n                    />\n\n                    <button type=\"submit\">Создать игру</button>\n                </Form>\n            </Formik>\n        </div>\n    );\n});\n\nconst AddThemeForm = observer(() => {\n    const {addGameStore: store, addGameViewStore: viewStore} = useStore();\n    return (\n        <Formik\n            initialValues={{\n                name: ''\n            }}\n            validationSchema={Yup.object({\n                name: Yup.string()\n                    .required('Обязательное поле')\n                    .max(20, 'Не более 20 символов')\n            })}\n            onSubmit={(values, {setSubmitting}) => {\n                setSubmitting(false);\n                viewStore.toggleAddThemeFormOpen();\n                store.selectedRound.addTheme(values.name);\n            }}\n        >\n            <Form>\n                <header>Новая тема</header>\n                <TextInput\n                    label=\"Название\"\n                    name=\"name\"\n                    type=\"text\"\n                />\n\n                <button type=\"submit\">Создать тему</button>\n            </Form>\n        </Formik>\n    );\n});\n\nconst Question = observer(({question}) => {\n    const {addGameStore: store, addGameViewStore: viewStore} = useStore();\n\n    return (\n        <td\n            className={`question-cell ${question.isSet ? '' : 'empty'}`}\n            onClick={() => {\n                store.setSelectedQuestion(question);\n                viewStore.toggleAddQuestionFormOpen();\n            }}\n        >{question.value}</td>\n\n    )\n});\n\nconst Theme = ({theme}) => {\n    return (\n        <tr>\n            <td\n                key={theme.name}\n                className='theme-name'\n            >\n                {theme.name}\n            </td>\n            {theme.questions.map(question => (\n                <Question\n                    key={theme.name + question.value.toString()}\n                    question={question}\n                />\n            ))}\n        </tr>\n    )\n}\n\nconst AddQuestionForm = observer(() => {\n    const {addGameStore: store, addGameViewStore: viewStore} = useStore();\n\n    return (\n        <Formik\n            initialValues={{\n                text: store.selectedQuestion.text ?? '',\n                answer: store.selectedQuestion.answer ?? '',\n            }}\n            validationSchema={Yup.object({\n                text: Yup.string()\n                    .required('Обязательное поле')\n                    .max(200, 'Не более 200 символов'),\n                answer: Yup.string()\n                    .required('Обязательное поле')\n                    .max(50, 'Не более 50 символов')\n            })}\n            onSubmit={(values, {setSubmitting}) => {\n                setSubmitting(false);\n                viewStore.toggleAddQuestionFormOpen();\n                store.selectedQuestion.set(values.text, values.answer);\n            }}\n        >\n            <Form>\n                <header>Вопрос за {store.selectedQuestion.value}</header>\n                <TextInput\n                    label=\"Текст вопроса\"\n                    name=\"text\"\n                    type=\"text\"\n                />\n                <TextInput\n                    label=\"Ответ\"\n                    name=\"answer\"\n                    type=\"text\"\n                />\n\n                <button type=\"submit\">Сохранить</button>\n            </Form>\n        </Formik>\n    );\n});\n\nconst AddFinalQuestionForm = observer(({history}) => {\n    const {addGameStore: store} = useStore();\n\n    return (\n        <Formik\n            initialValues={{\n                text: store.finalRound.text ?? '',\n                answer: store.finalRound.answer ?? ''\n            }}\n            validationSchema={Yup.object({\n                text: Yup.string()\n                    .required('Обязательное поле')\n                    .max(200, 'Не более 200 символов'),\n                answer: Yup.string()\n                    .required('Обязательное поле')\n                    .max(50, 'Не более 50 символов')\n            })}\n            onSubmit={(values, {setSubmitting, setErrors}) => {\n                store.setFinalRound(values.text, values.answer);\n                if (store.isAllRoundsFilled)\n                    if (store.isAllQuestionsFilled) {\n                        let storeSnapshot = getSnapshot(store);\n                        addGameService.post({\n                            name: storeSnapshot.name,\n                            rounds: storeSnapshot.rounds.map(round => ({\n                                themes: round.themes.map(theme => ({\n                                    name: theme.name,\n                                    questions: theme.questions.map(({id, ...rest}) => rest)\n                                }))\n                            })),\n                            finalRound: {\n                                value: storeSnapshot.finalRound.value,\n                                text: storeSnapshot.finalRound.text,\n                                answer: storeSnapshot.finalRound.answer\n                            }\n                        })\n                            .then(() => {\n                                setSubmitting(false);\n                                history.push('/games');\n                            })\n                            .catch(error =>\n                                setErrors({'submitError': error.message})\n                            );\n                    } else\n                        setErrors({'submitError': 'Заполните все вопросы'})\n                else\n                    setErrors({'submitError': 'В каждом раунде должны быть темы'})\n\n            }}\n        >\n            <Form>\n                <header>Финальный вопрос</header>\n                <TextInput\n                    label=\"Текст вопроса\"\n                    name=\"text\"\n                    type=\"text\"\n                />\n                <TextInput\n                    label=\"Ответ\"\n                    name=\"answer\"\n                    type=\"text\"\n                />\n\n                <SubmitError name='submitError'/>\n\n                <button type=\"submit\">Сохранить игру</button>\n            </Form>\n        </Formik>\n    );\n});\n\nconst Round = observer(({round}) => {\n    const {addGameStore: store, addGameViewStore: viewStore} = useStore();\n\n    return (\n        <>\n            <header>{toOrdinal(round.index + 1)} раунд</header>\n\n            <table className=\"round add-game-table\">\n                <tbody>\n                {round.themes && round.themes.map(theme =>\n                    <Theme key={theme.name}\n                           theme={theme}\n                    />\n                )}\n                </tbody>\n            </table>\n            <div className='button-group'>\n                <button onClick={viewStore.toggleAddThemeFormOpen}>Добавить тему</button>\n            </div>\n\n            <div className='button-group'>\n                <button disabled={round.index === 0}\n                        onClick={store.previousRound}\n                >\n                    Предыдущий раунд\n                </button>\n\n                <button onClick={() => {\n                    if (round.index < store.roundsCount - 2)\n                        store.nextRound()\n                    else\n                        viewStore.toggleAddFinalQuestionFormOpen()\n                }}\n                >\n                    Следующий раунд\n                </button>\n            </div>\n        </>\n    );\n});\n\nconst RoundsView = observer(() => {\n    const history = useHistory();\n    const {addGameStore: store, addGameViewStore: viewStore} = useStore();\n\n    return (\n        <>\n            <Round round={store.selectedRound}/>\n\n            <Modal\n                className='modal form add-theme'\n                overlayClassName='overlay'\n                isOpen={viewStore.isAddThemeFormOpen}\n                onRequestClose={viewStore.toggleAddThemeFormOpen}\n                ariaHideApp={false}\n            >\n                <AddThemeForm/>\n            </Modal>\n\n            <Modal\n                className='modal form add-question'\n                overlayClassName='overlay'\n                isOpen={viewStore.isAddQuestionFormOpen}\n                onRequestClose={viewStore.toggleAddQuestionFormOpen}\n                ariaHideApp={false}\n            >\n                <AddQuestionForm/>\n            </Modal>\n\n\n            <Modal\n                className='modal form add-final-question'\n                overlayClassName='overlay'\n                isOpen={viewStore.isAddFinalQuestionFormOpen}\n                onRequestClose={viewStore.toggleAddFinalQuestionFormOpen}\n                ariaHideApp={false}\n            >\n                <AddFinalQuestionForm\n                    history={history}\n                />\n            </Modal>\n        </>\n    );\n});\n\nconst AddGame = observer(() => {\n    const {addGameStore: store, addGameViewStore: viewStore} = useStore();\n\n    useEffect(() => {\n        document.title = 'Добавление игры'\n\n        return () => {\n            store.clear();\n            viewStore.clear();\n        }\n    }, [store, viewStore]);\n\n    return (\n        <div className='add-game'>\n            {viewStore.isAddGameFormOpen\n                ? <AddGameForm/>\n                : <RoundsView/>\n            }\n        </div>\n    )\n\n});\n\nexport default AddGame;","import {useAuth} from \"./auth\";\nimport {Form, Formik} from \"formik\";\nimport * as Yup from \"yup\";\nimport {SubmitError, TextInput} from \"./inputs\";\nimport {UserProfileService} from \"./services\";\nimport {useEffect, useState} from 'react'\n\nconst userProfileService = new UserProfileService()\n\nconst UserProfileForm = () => {\n    const auth = useAuth();\n    const [credentials, setCredentials] = useState({nickname: '', password: ''});\n\n    document.title = 'Профиль пользователя';\n\n    useEffect(() => {\n        userProfileService.get(auth.getUsername())\n            .then(response =>\n                setCredentials({\n                    username: response.data.username,\n                    nickname: response.data.nickname,\n                    password: ''\n                })\n            )\n    }, [auth])\n\n    return (\n        <div className='form'>\n            <Formik\n                enableReinitialize\n                initialValues={credentials}\n                validationSchema={Yup.object({\n                    nickname: Yup.string()\n                        .optional()\n                        .min(2, 'Не менее 2 символов')\n                        .max(25, 'Не более 25 символов'),\n                    password: Yup.string()\n                        .optional()\n                        .min(6, 'Не менее 6 символов')\n                        .max(128, 'Не более 128 символов')\n                })}\n                onSubmit={(values, {setSubmitting, setErrors}) => {\n                    if (values.nickname.length === 0 && values.password.length === 0)\n                        setErrors({'submitError': 'Заполните хотя бы одно поле'})\n                    else\n                        userProfileService.save(credentials.username, values.nickname, values.password)\n                            .then(() =>\n                                setSubmitting(false)\n                            );\n                }}\n            >\n                <Form>\n                    <header>Профиль</header>\n                    <TextInput\n                        label=\"Ник\"\n                        name=\"nickname\"\n                        type=\"text\"\n                    />\n                    <TextInput\n                        label=\"Пароль\"\n                        name=\"password\"\n                        type=\"password\"\n                    />\n\n                    <SubmitError name='submitError'/>\n\n                    <button type=\"submit\">Сохранить</button>\n                </Form>\n            </Formik>\n        </div>\n    );\n};\n\nexport default UserProfileForm;","import './game.css';\nimport './round.css';\n\nimport {useEffect, useState} from \"react\";\nimport {observer} from \"mobx-react-lite\";\nimport {useHistory} from \"react-router-dom\";\nimport {Field, Form, Formik} from \"formik\";\nimport ReactTooltip from 'react-tooltip';\n\nimport Notifier from \"./notifiers\";\nimport {GameSessionService} from \"./services\";\nimport {State} from \"./utils\";\nimport {useStore} from \"./stores/RootStore\";\n\n\nconst gameSessionService = new GameSessionService();\n\nconst PlayerControls = observer(() => {\n    const {gameSessionStore: store} = useStore();\n    const history = useHistory();\n\n    return (\n        <div className='player-controls'>\n            <Formik\n                initialValues={{\n                    answer: '',\n                }}\n                onSubmit={(values, {setSubmitting, resetForm}) => {\n                    if (values.answer?.length > 0) {\n                        gameSessionService.submit_answer(store.id, values.answer);\n                        resetForm();\n                        setSubmitting(false);\n                    }\n                }}\n            >\n                <Form>\n                    <Field id=\"answer\" as='textarea' name=\"answer\" placeholder=\"Введите ответ\"/>\n                    <button type=\"submit\">Ответить</button>\n                </Form>\n            </Formik>\n\n            <button\n                onClick={() => {\n                    gameSessionService.leave(store.id);\n                    history.push('/games');\n                }}\n            >\n                Выйти из игры\n            </button>\n        </div>\n    )\n});\n\nconst HostCard = observer(() => {\n    const {gameSessionStore: store} = useStore();\n    let hostText = '';\n    let hostImageURL;\n\n    switch (store.state) {\n        case State.WAITING: {\n            hostText = 'ожидаем игроков';\n            hostImageURL = gameSessionService.get_host_image_url(State.WAITING);\n            break;\n        }\n        case State.ROUND_ENDED:\n        case State.FINAL_ROUND_STARTED:\n        case State.CHOOSING_QUESTION:\n        case State.TIMEOUT: {\n            if (store.state === State.TIMEOUT)\n                hostText = `Правильный ответ: ${store.currentAnswer.text}. `\n            else if (store.currentAnswer?.isCorrect)\n                hostText = 'Правильно! ';\n\n            if (store.state === State.ROUND_ENDED) {\n                hostText += 'Раунд закончен.';\n                hostImageURL = gameSessionService.get_host_image_url(State.ROUND_STARTED);\n            } else if (store.state === State.FINAL_ROUND_STARTED) {\n                hostText += 'Впереди финальный раунд.';\n                hostImageURL = gameSessionService.get_host_image_url(State.ROUND_STARTED);\n            } else {\n                hostText += `${store.currentPlayer.nickname}, выбирайте вопрос.`;\n                hostImageURL = gameSessionService.get_host_image_url(State.CHOOSING_QUESTION);\n            }\n            break;\n        }\n        case State.ANSWERING: {\n            const themeName = store.currentRound.themes[store.currentQuestionIndexes.theme].name;\n            const value = store.currentQuestion.value;\n            hostText = `${themeName} за ${value}`;\n            hostImageURL = gameSessionService.get_host_image_url(State.ANSWERING);\n\n            if (store.currentAnswer?.text.length > 0) {\n                hostText = 'Неверно.';\n                hostImageURL = gameSessionService.get_host_image_url('wrong');\n            }\n            break;\n        }\n        case State.FINAL_ROUND: {\n            hostImageURL = gameSessionService.get_host_image_url(State.FINAL_ROUND);\n            hostText = 'Финальный раунд';\n            break;\n        }\n        case State.END_GAME: {\n            const winner = store.players.reduce((a, b) => a.score > b.score ? a : b);\n            hostText = `Победил ${winner.nickname}!`;\n            hostImageURL = gameSessionService.get_host_image_url(State.END_GAME);\n            break;\n        }\n        default: {\n            hostText = '';\n            hostImageURL = gameSessionService.get_host_image_url(State.WAITING);\n        }\n    }\n\n    return (\n        <div className='host-card'>\n            <img\n                src={hostImageURL}\n                alt='host'\n            />\n            <div>\n                {hostText}\n            </div>\n        </div>\n    )\n});\n\nconst QuestionScreen = observer(() => {\n    const {gameSessionStore: store} = useStore();\n\n    return (\n        <div className='question'>\n            {\n                ([State.ROUND_STARTED, State.ROUND_ENDED, State.FINAL_ROUND_STARTED, State.WAITING].includes(store.state))\n                    ? store.roundText\n                    : store.currentQuestion.text\n            }\n        </div>\n    )\n});\n\nconst QuestionCell = observer(({question, theme_order, question_order}) => {\n    const {gameSessionStore: store} = useStore();\n    const [clicked, setClicked] = useState(false);\n\n    return (\n        <td className={`question-cell ${question.isAnswered ? 'empty' : ''} ${clicked ? 'clicked' : ''}`}\n            onClick={() => {\n                setClicked(true);\n                gameSessionService.choose_question(store.id, theme_order, question_order);\n            }}\n        >\n            {question.value}\n        </td>\n    )\n});\n\nconst Theme = ({theme, theme_order}) => {\n    return (\n        <tr>\n            <td>\n                {theme.name}\n            </td>\n            {theme.questions.map((question, index) =>\n                <QuestionCell\n                    key={question.value}\n                    theme_order={theme_order}\n                    question={question}\n                    question_order={index}\n                />\n            )}\n        </tr>\n\n    )\n}\n\nconst RoundTable = ({themes}) => {\n    return (\n        <table className='round round-table'>\n            <tbody>\n                {themes.map((theme, index) =>\n                    <Theme\n                        key={theme.name}\n                        theme={theme}\n                        theme_order={index}\n                    />\n                )}\n            </tbody>\n        </table>\n    )\n}\n\nconst GameScreen = observer(() => {\n    const {gameSessionStore: store} = useStore();\n    return (\n        [State.CHOOSING_QUESTION, State.TIMEOUT].includes(store.state)\n            ? <RoundTable\n                key='table'\n                themes={store.currentRound.themes}\n            />\n            : <QuestionScreen\n                key='question'\n            />\n    )\n});\n\nconst PlayerCard = observer(({player}) => {\n    const {gameSessionStore: store} = useStore();\n    const [answer, setAnswer] = useState('');\n    let tooltipRef;\n\n    function wait() {\n        setTimeout(ReactTooltip.hide, 3000, tooltipRef);\n    }\n\n    useEffect(() => {\n        if (store.currentAnswer?.text.length > 0\n            && store.currentPlayer?.nickname === player.nickname) {\n            setAnswer(store.currentAnswer.text);\n            ReactTooltip.show(tooltipRef);\n\n            wait();\n        }\n\n    }, [store.currentAnswer])\n\n    useEffect(() => {\n        if (player.answer) {\n            setAnswer(player.answer);\n            ReactTooltip.show(tooltipRef);\n\n            wait()\n        }\n    }, [player.answer])\n\n    return (\n        <>\n            <div\n                className='player-card'\n                data-tip\n                data-for={player.nickname + '_tooltip'}\n                ref={ref => tooltipRef = ref}\n            >\n                <img\n                    src={gameSessionService.get_avatar_url()}\n                    alt={player.nickname}\n                />\n                <div>{player.nickname}</div>\n                <div>{player.score}</div>\n            </div>\n            <ReactTooltip\n                className='tooltip'\n                id={player.nickname + '_tooltip'}\n                effect='solid'\n                delayHide={3000}\n                event='null'\n                getContent={() => answer}\n            >\n            </ReactTooltip>\n        </>\n    )\n});\n\nconst Players = observer(() => {\n    const {gameSessionStore: store} = useStore();\n\n    return (\n        <div className='players'>\n            {store.players.map((player) =>\n                <PlayerCard\n                    key={player.nickname}\n                    player={player}\n                />\n            )}\n        </div>\n    )\n});\n\nconst Game = observer(() => {\n    const {gameSessionStore: store} = useStore();\n\n    useEffect(() => {\n        document.title = 'Игра';\n\n        const gameSessionId = store.id > 0 ? store.id : Number(localStorage.getItem('gameSessionId'));\n\n        if (!store.id)\n            store.setId(gameSessionId);\n\n        const notifier = new Notifier('game', gameSessionId);\n        notifier.setListener(store.listener);\n\n        return () => notifier.close();\n    }, [store]);\n\n    useEffect(() => {\n        function wait(state) {\n            setTimeout(store.setState, 5000, state);\n        }\n\n        if (store.state === State.ROUND_ENDED)\n            wait(State.ROUND_STARTED)\n        else if (store.state === State.ROUND_STARTED) {\n            store.clearCurrentAnswer();\n            wait(State.CHOOSING_QUESTION)\n        } else if (store.state === State.FINAL_ROUND_STARTED)\n            wait(State.FINAL_ROUND)\n    }, [store, store.state]);\n\n    return (\n        <div className='game'>\n\n            <GameScreen/>\n\n            <Players/>\n\n            <HostCard/>\n\n            <PlayerControls/>\n        </div>\n    )\n});\n\nexport default Game","import React, {Fragment} from \"react\";\nimport './App.css'\nimport {RegisterForm} from \"./registration\";\nimport {PrivateRoute, useAuth} from \"./auth\";\nimport LoginForm from \"./login\";\nimport GameList from \"./games\";\nimport Header from \"./header\";\nimport Lobby from \"./lobby\";\nimport AddGame from \"./addGame\";\nimport UserProfileForm from \"./userProfile\";\nimport Game from \"./game\";\n\nimport {BrowserRouter as Router, Redirect, Route, Switch} from \"react-router-dom\";\n\nfunction App() {\n    const auth = useAuth();\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\">\n                    {auth.isAuthenticated ? <Redirect to=\"/games\"/> : <Redirect to=\"/login\"/>}\n                </Route>\n                <Route path=\"/register\">\n                    <RegisterForm/>\n                </Route>\n                <Route path=\"/login\">\n                    <LoginForm/>\n                </Route>\n                <Fragment>\n                    <Header/>\n                    <PrivateRoute exact path=\"/user\">\n                        <UserProfileForm/>\n                    </PrivateRoute>\n                    <PrivateRoute exact path=\"/games\">\n                        <GameList/>\n                    </PrivateRoute>\n                    <PrivateRoute exact path=\"/games/new\">\n                        <AddGame/>\n                    </PrivateRoute>\n                    <PrivateRoute path=\"/lobby\">\n                        <Lobby/>\n                    </PrivateRoute>\n                    <PrivateRoute path=\"/game\">\n                        <Game/>\n                    </PrivateRoute>\n                </Fragment>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {ProvideAuth} from \"./auth\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <ProvideAuth>\n            <App/>\n        </ProvideAuth>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}