{
  "version": 3,
  "sources": [
    "inputs.js",
    "services.js",
    "auth.js",
    "registration.js",
    "login.js",
    "games.js",
    "header.js",
    "notifiers.js",
    "lobby.js",
    "utils.js",
    "addGame.js",
    "userProfile.js",
    "game.js",
    "App.js",
    "reportWebVitals.js",
    "index.js"
  ],
  "names": [
    "TextInput",
    "label",
    "props",
    "useField",
    "field",
    "meta",
    "className",
    "htmlFor",
    "name",
    "style",
    "visibility",
    "touched",
    "error",
    "SubmitError",
    "axios",
    "defaults",
    "baseURL",
    "interceptors",
    "request",
    "use",
    "config",
    "url",
    "access_token",
    "localStorage",
    "getItem",
    "headers",
    "response",
    "status",
    "console",
    "log",
    "Promise",
    "reject",
    "refresh_token",
    "post",
    "refresh",
    "then",
    "setItem",
    "data",
    "access",
    "AuthService",
    "credentials",
    "username",
    "nickname",
    "password",
    "catch",
    "GameListService",
    "get",
    "LobbyService",
    "AddGameService",
    "game_name",
    "themes",
    "questions",
    "game",
    "final_round_question",
    "filter",
    "q",
    "theme",
    "final_round",
    "text",
    "answer",
    "value",
    "rounds",
    "r",
    "round",
    "t",
    "sort",
    "q1",
    "q2",
    "push",
    "length",
    "Error",
    "UserProfileService",
    "patch",
    "GameSessionService",
    "gameName",
    "max_players",
    "game_session_id",
    "delete",
    "theme_order",
    "question_order",
    "state",
    "imageURL",
    "authContext",
    "createContext",
    "authService",
    "useAuth",
    "useContext",
    "ProvideAuth",
    "children",
    "auth",
    "setUsername",
    "register",
    "message",
    "login",
    "isAuthenticated",
    "getUsername",
    "useProvideAuth",
    "Provider",
    "PrivateRoute",
    "rest",
    "render",
    "location",
    "to",
    "pathname",
    "from",
    "RegisterForm",
    "history",
    "useHistory",
    "document",
    "title",
    "initialValues",
    "validationSchema",
    "Yup",
    "min",
    "max",
    "required",
    "onSubmit",
    "values",
    "setSubmitting",
    "setErrors",
    "type",
    "placeholder",
    "LoginForm",
    "gameListService",
    "gameSessionService",
    "CreateGameSessionForm",
    "create",
    "GameDescription",
    "descr",
    "author",
    "rounds_count",
    "onClick",
    "createGameSession",
    "GameList",
    "useState",
    "gameDescriptions",
    "setGameDescriptions",
    "isCreateGameSessionFormOpen",
    "setIsCreateGameSessionFormOpen",
    "chosenGame",
    "setChosenGame",
    "useEffect",
    "getDescriptions",
    "result",
    "map",
    "overlayClassName",
    "isOpen",
    "onRequestClose",
    "ariaHideApp",
    "Header",
    "activeClassName",
    "Notifier",
    "id",
    "this",
    "createUrl",
    "listener",
    "ws",
    "WebSocket",
    "onmessage",
    "JSON",
    "parse",
    "event",
    "close",
    "GameSessionDescription",
    "creator",
    "current_players",
    "join",
    "reducer",
    "concat",
    "index",
    "findIndex",
    "d",
    "slice",
    "Lobby",
    "useReducer",
    "dispatch",
    "notifier",
    "setListener",
    "State",
    "Object",
    "freeze",
    "WAITING",
    "ROUND_STARTED",
    "CHOOSING_QUESTION",
    "ANSWERING",
    "TIMEOUT",
    "ROUND_ENDED",
    "FINAL_ROUND_STARTED",
    "FINAL_ROUND",
    "END_GAME",
    "toOrdinal",
    "n",
    "addGameService",
    "AddGameForm",
    "questions_count",
    "typeError",
    "integer",
    "setGameParams",
    "AddThemeForm",
    "setTheme",
    "Question",
    "isSet",
    "setQuestion",
    "Theme",
    "AddQuestionForm",
    "AddFinalQuestionForm",
    "setFinalQuestion",
    "isAllRoundsFilled",
    "Number",
    "isAllQuestionsFilled",
    "removeItem",
    "SetRounds",
    "isAddThemeFormOpen",
    "setIsAddThemeFormOpen",
    "isAddQuestionFormOpen",
    "setIsAddQuestionFormOpen",
    "isAddFinalQuestionFormOpen",
    "setIsAddFinalQuestionFormOpen",
    "gameParams",
    "setThemes",
    "currentRound",
    "setCurrentRound",
    "setQuestions",
    "questionParams",
    "setQuestionParams",
    "savedGame",
    "modals",
    "stringify",
    "v",
    "disabled",
    "nextRound",
    "question",
    "i",
    "newQuestion",
    "AddGame",
    "undefined",
    "setSavedGame",
    "userProfileService",
    "UserProfileForm",
    "setCredentials",
    "enableReinitialize",
    "optional",
    "save",
    "PlayerControls",
    "resetForm",
    "submit_answer",
    "as",
    "leave",
    "HostCard",
    "hostImageURL",
    "hostText",
    "get_host_image_url",
    "current_answer",
    "is_correct",
    "current_player",
    "current_question",
    "themeName",
    "winner",
    "players",
    "reduce",
    "a",
    "b",
    "score",
    "src",
    "alt",
    "QuestionScreen",
    "QuestionCell",
    "clicked",
    "setClicked",
    "is_answered",
    "questionChosen",
    "RoundTable",
    "GameScreen",
    "ReactCSSTransitionReplace",
    "transitionName",
    "transitionEnterTimeout",
    "transitionLeaveTimeout",
    "includes",
    "choose_question",
    "round_text",
    "question_text",
    "PlayerCard",
    "tooltipRef",
    "setAnswer",
    "wait",
    "setTimeout",
    "ReactTooltip",
    "hide",
    "player",
    "show",
    "data-tip",
    "data-for",
    "ref",
    "avatarURL",
    "effect",
    "delayHide",
    "getContent",
    "Players",
    "is_playing",
    "get_avatar_url",
    "not_answered_questions_count",
    "answered",
    "not_answered",
    "gameSession",
    "is_initialized",
    "p",
    "order",
    "playerIndex",
    "Game",
    "useLocation",
    "savedGameSession",
    "App",
    "exact",
    "path",
    "reportWebVitals",
    "onPerfEntry",
    "Function",
    "getCLS",
    "getFID",
    "getFCP",
    "getLCP",
    "getTTFB",
    "ReactDOM",
    "StrictMode",
    "getElementById"
  ],
  "mappings": "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",
  "file": "static/js/main.c08c1c40.chunk.js",
  "sourcesContent": [
    "import {useField} from \"formik\";\n\nconst TextInput = ({label, ...props}) => {\n    const [field, meta] = useField(props);\n\n    return (\n        <div className='form-group'>\n            <label htmlFor={props.name}> {label} </label>\n            <input className=\"text-input\" {...field} {...props} />\n            <div className=\"error\" style={{visibility: (meta.touched && meta.error) ? 'visible' : 'hidden'}}>\n                {meta.error || 'no error'} </div>\n        </div>\n    );\n};\n\nconst SubmitError = (name) => {\n    const [, meta] = useField(name);\n\n    return (\n        <div className='form-group'>\n            <div className=\"error\" style={{visibility: meta.error ? 'visible' : 'hidden'}}>\n                {meta.error || 'no error'} </div>\n        </div>\n    );\n};\n\nexport {TextInput, SubmitError};",
    "import axios from 'axios';\n\naxios.defaults.baseURL = 'http://127.0.0.1:8000';\n\naxios.interceptors.request.use(\n    config => {\n        if (!(config.url === '/sessions/')) {\n            const access_token = localStorage.getItem('access_token');\n            config.headers['Authorization'] = `Bearer ${access_token}`;\n        }\n\n        return config;\n    }\n);\n\naxios.interceptors.response.use(\n    response => {\n        return response;\n    },\n    error => {\n        if (error.response.status !== 401\n            || error.config.url === '/sessions/') {\n            console.log(error);\n            return Promise.reject(error);\n        }\n\n        const refresh_token = localStorage.getItem('refresh_token');\n        if (refresh_token) {\n            axios.post('/sessions/new_token/', {\n                refresh: refresh_token\n            })\n                .then(response => {\n                    localStorage.setItem('access_token', response.data.access)\n                });\n            return axios.request(error.config);\n        } else {\n\n        }\n\n        console.log(error.response);\n\n    }\n);\n\n\nclass AuthService {\n\n    register(credentials) {\n        const url = '/users/';\n        return axios.post(url, {\n            username: credentials.username,\n            nickname: credentials.nickname,\n            password: credentials.password\n        })\n            .then(response => {\n                localStorage.setItem('access_token', response.data.access);\n                localStorage.setItem('refresh_token', response.data.refresh);\n                return response.status;\n            })\n            .catch(error => {\n                return error.response.status;\n            });\n    }\n\n    login(credentials) {\n        const url = '/sessions/';\n        return axios\n            .post(url, {\n                username: credentials.username,\n                password: credentials.password\n            })\n            .then(response => {\n                localStorage.setItem('access_token', response.data.access);\n                localStorage.setItem('refresh_token', response.data.refresh);\n                return response.status;\n            })\n            .catch(error => {\n                return error.response.status;\n            });\n    }\n\n}\n\nclass GameListService {\n    getDescriptions() {\n        const url = '/games/';\n        return axios.get(url);\n    }\n}\n\nclass LobbyService {\n    getDescriptions() {\n        const url = '/game_sessions/';\n        return axios.get(url);\n    }\n}\n\nclass AddGameService {\n    post(game_name, themes, questions) {\n        const url = '/games/';\n\n        let game = {};\n\n        game.name = game_name;\n\n        const final_round_question = questions.filter(q => q.theme === 'final')[0];\n        game.final_round = {\n            text: final_round_question.text,\n            answer: final_round_question.answer,\n            value: final_round_question.value\n        }\n\n        game.rounds = []\n        for (let r = 1; r < themes.length; r++) {\n            let round = {};\n\n            round.themes = []\n            for (let t of themes[r]) {\n                let theme = {};\n\n                theme.name = t.name;\n\n                theme.questions = questions\n                    .filter(q =>\n                        q.round === r\n                        && q.theme === theme.name\n                    )\n                    .sort((q1, q2) =>\n                        q1.value - q2.value\n                    )\n\n                for (let q of theme.questions) {\n                    delete q.theme;\n                    delete q.round;\n                }\n\n                round.themes.push(theme);\n            }\n\n            game.rounds.push(round);\n        }\n        console.log(game)\n\n        return axios.post(url, game)\n            .catch(error => {\n                if (error.response.status === 409)\n                    return Promise.reject(new Error('Игра с таким названием уже существует'))\n            });\n    }\n}\n\nclass UserProfileService {\n    get(username) {\n        const url = `/users/${username}/`;\n        return axios.get(url);\n    }\n\n    save(username, nickname, password) {\n        const url = `/users/${username}/`;\n\n        let data = {};\n        if (nickname && nickname.length > 0)\n            data.nickname = nickname\n        if (password && password.length > 0)\n            data.password = password\n\n        return axios.patch(url, data);\n    }\n}\n\nclass GameSessionService {\n    create(gameName, max_players) {\n        const url = '/game_sessions/';\n        console.log('create');\n        return axios.post(url, {\n            game_name: gameName,\n            max_players: max_players\n        })\n    }\n\n    join(game_session_id) {\n        const url = `game_sessions/chosen/${game_session_id}/`;\n        return axios.post(url);\n    }\n\n    leave(game_session_id) {\n        const url = `game_sessions/exited/${game_session_id}/`;\n        axios.delete(url);\n    }\n\n    choose_question(game_session_id, theme_order, question_order) {\n        const url = `game_sessions/${game_session_id}/question/`;\n        axios.post(url, {\n            theme_order: theme_order,\n            question_order: question_order\n        })\n            .catch(error => console.log(error));\n    }\n\n    submit_answer(game_session_id, answer) {\n        const url = `game_sessions/${game_session_id}/answer/`;\n        axios.post(url, {answer: answer});\n    }\n\n    get_host_image_url(state) {\n        const baseURL = 'http://127.0.0.1:8000';\n        const imageURL = baseURL + '/static/img/kuleshov/' + state + '.jpg';\n        console.log(imageURL);\n        return imageURL;\n    }\n\n    get_avatar_url() {\n        const baseURL = 'http://127.0.0.1:8000';\n        const imageURL = baseURL + '/static/img/avatar.png';\n        console.log(imageURL);\n        return imageURL;\n    }\n}\n\nexport {AuthService, GameListService, LobbyService, AddGameService, UserProfileService, GameSessionService};",
    "import React, {createContext, useContext} from \"react\";\nimport {Redirect, Route} from \"react-router-dom\";\nimport {AuthService} from \"./services\";\n\nconst authContext = createContext({});\nconst authService = new AuthService();\n\nfunction useAuth() {\n    return useContext(authContext);\n}\n\nfunction useProvideAuth() {\n\n    function setUsername(username) {\n        localStorage.setItem('username', username);\n    }\n\n    function getUsername() {\n        return localStorage.getItem('username');\n    }\n\n    function register(credentials) {\n        return authService.register(credentials)\n            .then(status => {\n                if (status < 400) {\n                    setUsername(credentials.username);\n                    return;\n                }\n\n                let message;\n                switch (status) {\n                    case 409:\n                        message = 'Пользователь уже существует';\n                        break;\n\n                    case 401:\n                        message = 'Неверные данные';\n                        break;\n\n                    default:\n                        message = 'Ошибка';\n                }\n                return Promise.reject(new Error(message))\n\n            })\n    }\n\n    function login(credentials) {\n        return authService.login(credentials)\n            .then(status => {\n                if (status < 400) {\n                    setUsername(credentials.username);\n                    return;\n                }\n\n                let message;\n                switch (status) {\n                    case 401:\n                        message = 'Неверные данные';\n                        break;\n\n                    default:\n                        message = 'Ошибка';\n                }\n                return Promise.reject(new Error(message))\n\n            })\n    }\n\n    function isAuthenticated() {\n        return localStorage.getItem('access_token') !== null;\n    }\n\n    return {\n        register,\n        login,\n        isAuthenticated,\n        setUsername,\n        getUsername\n    };\n}\n\nfunction ProvideAuth({children}) {\n    const auth = useProvideAuth();\n    return (\n        <authContext.Provider value={auth}>\n            {children}\n        </authContext.Provider>\n    );\n}\n\n\nfunction PrivateRoute({children, ...rest}) {\n    const auth = useAuth();\n    return (\n        <Route\n            {...rest}\n            render={({location}) =>\n                auth.isAuthenticated() ? (\n                    children\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: \"/login\",\n                            state: {from: location}\n                        }}\n                    />\n                )\n            }\n        />\n    );\n}\n\nexport {useAuth, ProvideAuth, PrivateRoute};",
    "import {Form, Formik} from \"formik\";\nimport * as Yup from \"yup\";\nimport {SubmitError, TextInput} from \"./inputs\";\nimport {useAuth} from \"./auth\";\nimport {Link, useHistory} from \"react-router-dom\";\n\nconst RegisterForm = () => {\n    const auth = useAuth();\n    const history = useHistory();\n\n    document.title = 'Регистрация'\n\n    return (\n        <div className='form'>\n            <Formik\n                initialValues={{\n                    username: 'qqqqqqqqqq',\n                    nickname: 'qqqqqqqqqqqqqqqqqq',\n                    password: 'qqqqqqqqqq',\n                }}\n                validationSchema={Yup.object({\n                    username: Yup.string()\n                        .min(2, 'Не менее 2 символов')\n                        .max(25, 'Не более 25 символов')\n                        .required('Обязательное поле'),\n                    nickname: Yup.string()\n                        .min(2, 'Не менее 2 символов')\n                        .max(25, 'Не более 25 символов'),\n                    password: Yup.string()\n                        .min(6, 'Не менее 6 символов')\n                        .max(128, 'Не более 128 символов')\n                        .required('Обязательное поле')\n                })}\n                onSubmit={(values, {setSubmitting, setErrors}) => {\n                    auth.register(values)\n                        .then(() => {\n                            console.log('зареган');\n                            setSubmitting(false);\n                            history.push('/games');\n                        })\n                        .catch(error => {\n                            setErrors({'submitError': error.message});\n                        })\n                }}\n            >\n                <Form>\n                    <header>Регистрация</header>\n                    <TextInput\n                        label=\"Имя пользователя\"\n                        name=\"username\"\n                        type=\"text\"\n                    />\n                    <TextInput\n                        label=\"Ник\"\n                        name=\"nickname\"\n                        type=\"text\"\n                        placeholder='Необязательно'\n                    />\n                    <TextInput\n                        label=\"Пароль\"\n                        name=\"password\"\n                        type=\"password\"\n                    />\n\n                    <SubmitError name='submitError'/>\n\n                    <Link to='/login'>Уже зарегистрированы?</Link>\n\n                    <button type=\"submit\">Зарегистрировать</button>\n                </Form>\n            </Formik>\n        </div>\n    );\n};\n\nexport {RegisterForm};",
    "import {Form, Formik} from \"formik\";\nimport * as Yup from \"yup\";\nimport {SubmitError, TextInput} from \"./inputs\";\nimport {useAuth} from \"./auth\";\nimport {Link, useHistory} from \"react-router-dom\";\n\nconst LoginForm = () => {\n    const auth = useAuth();\n    const history = useHistory();\n\n    document.title = 'Вход';\n\n    return (\n        <div className='form'>\n            <Formik\n                initialValues={{\n                    username: 'frok',\n                    password: '1234',\n                }}\n                validationSchema={Yup.object({\n                    username: Yup.string()\n                        .required('Обязательное поле'),\n                    password: Yup.string()\n                        .required('Обязательное поле')\n                })}\n                onSubmit={(values, {setSubmitting, setErrors}) => {\n                    auth.login(values)\n                        .then(() => {\n                            setSubmitting(false);\n                            history.push('/games');\n                        })\n                        .catch(error => {\n                            setErrors({'submitError': error.message});\n                        })\n                }}\n            >\n                <Form>\n                    <header>Вход</header>\n                    <TextInput\n                        label=\"Имя пользователя\"\n                        name=\"username\"\n                        type=\"text\"\n                    />\n                    <TextInput\n                        label=\"Пароль\"\n                        name=\"password\"\n                        type=\"password\"\n                    />\n\n                    <SubmitError name='submitError'/>\n\n                    <Link to='/register'>Еще не зарегистрированы?</Link>\n\n                    <button type=\"submit\">Войти</button>\n                </Form>\n            </Formik>\n        </div>\n    );\n};\n\nexport default LoginForm;",
    "import './list.css';\nimport {useEffect, useState} from 'react'\nimport {GameListService, GameSessionService} from \"./services\";\nimport {useHistory} from \"react-router-dom\";\nimport {Form, Formik} from \"formik\";\nimport * as Yup from \"yup\";\nimport {TextInput} from \"./inputs\";\nimport Modal from \"react-modal\";\n\nconst gameListService = new GameListService();\nconst gameSessionService = new GameSessionService();\n\nconst CreateGameSessionForm = (props) => {\n    return (\n        <Formik\n            initialValues={{\n                max_players: '2'\n            }}\n            validationSchema={Yup.object({\n                max_players: Yup.number()\n                    .required('Обязательное поле')\n                    .min(2, 'Не менее 2 игроков')\n                    .max(10, 'Не более 10 игроков')\n            })}\n            onSubmit={(values, {setSubmitting}) => {\n                gameSessionService.create(props.gameName, values.max_players)\n                    .then((response) => {\n                        setSubmitting(false);\n                        props.history.push('/game', response.data)\n                    })\n            }}\n        >\n            <Form>\n                <header>Новая игра</header>\n                <TextInput\n                    label=\"Количество игроков\"\n                    name=\"max_players\"\n                    type=\"text\"\n                />\n\n                <button type=\"submit\">Начать игру</button>\n            </Form>\n        </Formik>\n    );\n}\n\nconst GameDescription = (props) => {\n    const descr = props.descr;\n\n    return (\n        <tr>\n            <td>{descr.author}</td>\n            <td>{descr.name}</td>\n            <td>{descr.rounds_count}</td>\n            <td>\n                <button\n                    onClick={() => props.createGameSession(descr.name)}\n                >\n                    Играть\n                </button>\n            </td>\n        </tr>\n    );\n};\nconst GameList = () => {\n    const [gameDescriptions, setGameDescriptions] = useState([]);\n    const [isCreateGameSessionFormOpen, setIsCreateGameSessionFormOpen] = useState(false);\n    const [chosenGame, setChosenGame] = useState(0);\n    const history = useHistory();\n\n\n    useEffect(() => {\n        document.title = 'Игры';\n\n        gameListService.getDescriptions()\n            .then(result => {\n                setGameDescriptions(result.data)\n            });\n    }, [])\n\n    return (\n        <div className='games'>\n            <header>Игры</header>\n\n            <table className=\"list games-table\">\n                <thead key=\"games-table-head\">\n                <tr>\n                    <th>Автор</th>\n                    <th>Название</th>\n                    <th>Раунды</th>\n                </tr>\n                </thead>\n                <tbody>\n                {gameDescriptions.map(descr =>\n                    <GameDescription\n                        key={descr.name}\n                        descr={descr}\n                        createGameSession={(gameName) => {\n                            setChosenGame(gameName);\n                            setIsCreateGameSessionFormOpen(true);\n                        }}\n                    />\n                )}\n                </tbody>\n            </table>\n\n            <button onClick={() => history.push('/games/new')}>Создать новую игру</button>\n\n\n            <Modal\n                className='modal form create-game-session'\n                overlayClassName='overlay'\n                isOpen={isCreateGameSessionFormOpen}\n                onRequestClose={() => setIsCreateGameSessionFormOpen(false)}\n                ariaHideApp={false}\n            >\n                <CreateGameSessionForm\n                    gameName={chosenGame}\n                    history={history}\n                />\n            </Modal>\n        </div>\n    );\n};\n\nexport default GameList;",
    "import './header.css';\nimport {Link, NavLink} from \"react-router-dom\";\nimport {useAuth} from \"./auth\";\n\nfunction Header() {\n    const auth = useAuth();\n    const username = auth.getUsername();\n\n    return (\n        <header className=\"nav\">\n            <nav>\n                <NavLink to='/games' activeClassName='active'>Игры</NavLink>\n                <NavLink to='/lobby' activeClassName='active'>Лобби</NavLink>\n            </nav>\n            <Link to='/user'>{username}</Link>\n        </header>\n    );\n}\n\nexport default Header",
    "class Notifier {\n    constructor(type, id = '') {\n        this.url = Notifier.createUrl(type, id);\n        this.listener = null;\n\n        this.ws = new WebSocket(this.url);\n    }\n\n    static createUrl(type, id) {\n        switch (type) {\n            case 'lobby':\n                return 'ws://127.0.0.1:8000/ws/lobby/'\n            case 'game':\n                return `ws://127.0.0.1:8000/ws/game_sessions/${id}/`\n            default:\n                throw new Error('нет такого типа уведомлений')\n        }\n    }\n\n    setListener(listener) {\n        this.listener = listener;\n\n        this.ws.onmessage = (message) => {\n            const data = JSON.parse(message.data);\n            console.log('ws', data);\n            this.listener([data.event, data.data]);\n        }\n    }\n\n    close() {\n        console.log('ws close');\n        this.ws.close();\n    }\n\n}\n\nexport default Notifier;",
    "import './list.css';\nimport {useEffect, useReducer} from 'react';\nimport {GameSessionService, LobbyService} from \"./services\";\nimport Notifier from \"./notifiers\";\nimport {useHistory} from \"react-router-dom\";\n\nconst gameSessionService = new GameSessionService();\n\nconst GameSessionDescription = (props) => {\n    const descr = props.descr;\n    return (\n        <tr>\n            <td>{descr.creator}</td>\n            <td>{descr.game_name}</td>\n            <td>{descr.current_players}/{descr.max_players}</td>\n            <td>\n                <button\n                    onClick={() => {\n                        gameSessionService.join(descr.id)\n                            .then(response =>\n                                props.history.push('/game', response.data)\n                            )\n                    }}\n                >\n                    Играть\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nfunction reducer(gameDescriptions, [event, data]) {\n    switch (event) {\n        case 'init': {\n            return data;\n        }\n        case 'game_session_created': {\n            return gameDescriptions.concat(data);\n        }\n        case 'game_session_deleted': {\n            const index = gameDescriptions.findIndex(d => d.id === data.game_session_id);\n            return gameDescriptions.slice(0, index - 1)\n                .concat(gameDescriptions.slice(index + 1))\n        }\n        case 'player_joined': {\n            const index = gameDescriptions.findIndex(d => d.id === data.game_session_id);\n            return gameDescriptions.slice(0, index - 1)\n                .concat(\n                    {...gameDescriptions[index], current_players: gameDescriptions[index].current_players + 1}\n                    , gameDescriptions.slice(index + 1))\n        }\n        case 'player_left': {\n            const index = gameDescriptions.findIndex(d => d.id === data.game_session_id);\n            return gameDescriptions.slice(0, index - 1)\n                .concat(\n                    {...gameDescriptions[index], current_players: gameDescriptions[index].current_players - 1}\n                    , gameDescriptions.slice(index + 1))\n        }\n        default:\n            throw new Error('нет такого события')\n    }\n}\n\nconst Lobby = () => {\n    const [gameDescriptions, dispatch] = useReducer(reducer, []);\n    const history = useHistory();\n\n    useEffect(() => {\n        document.title = 'Лобби'\n\n        const notifier = new Notifier('lobby');\n        notifier.setListener(dispatch);\n\n        const lobbyService = new LobbyService();\n        lobbyService.getDescriptions()\n            .then(result => {\n                dispatch(['init', result.data]);\n            });\n\n        return () => notifier.close()\n    }, []);\n\n    return (\n        <div className='lobby'>\n            <header>Лобби</header>\n\n            <table className=\"list lobby-table\">\n                <thead key=\"lobby-table-head\">\n                <tr>\n                    <th>Создатель</th>\n                    <th>Название</th>\n                    <th>Игроки</th>\n                </tr>\n                </thead>\n                <tbody>\n                {gameDescriptions.length > 0 && gameDescriptions.map(descr =>\n                    <GameSessionDescription\n                        key={descr.creator}\n                        descr={descr}\n                        history={history}\n                    />\n                )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default Lobby;",
    "const State = Object.freeze({\n    WAITING: 0,\n    ROUND_STARTED: 1,\n    CHOOSING_QUESTION: 2,\n    ANSWERING: 3,\n    TIMEOUT: 4,\n    ROUND_ENDED: 5,\n    FINAL_ROUND_STARTED: 6,\n    FINAL_ROUND: 7,\n    END_GAME: 8\n})\n\nfunction toOrdinal(n) {\n    const ordinals = ['Нулевой',\n        'Первый',\n        'Второй',\n        'Третий',\n        'Четвертый',\n        'Пятый',\n        'Шестой',\n        'Седьмой',\n        'Восьмой',\n        'Девятый'\n    ]\n\n    return ordinals[n];\n}\n\nexport {State, toOrdinal}",
    "import './round.css';\nimport {Form, Formik} from \"formik\";\nimport * as Yup from \"yup\";\nimport {SubmitError, TextInput} from \"./inputs\";\nimport {useEffect, useState} from \"react\";\nimport Modal from \"react-modal\";\nimport {AddGameService} from \"./services\";\nimport {useHistory} from 'react-router-dom';\nimport {toOrdinal} from \"./utils\";\n\nconst addGameService = new AddGameService();\n\nconst AddGameForm = (props) => {\n    return (\n        <div className='form'>\n            <Formik\n                initialValues={{\n                    name: '',\n                    rounds_count: '3',\n                    questions_count: '5',\n                }}\n                validationSchema={Yup.object({\n                    name: Yup.string()\n                        .required('Обязательное поле'),\n                    rounds_count: Yup.number()\n                        .required('Обязательное поле')\n                        .min(2, 'Не менее 2 раундов')\n                        .max(10, 'Не более 10 раундов')\n                        .typeError('Введите число')\n                        .integer('Так тоже не прокатит'),\n                    questions_count: Yup.number()\n                        .required('Обязательное поле')\n                        .min(1, 'Не менее 1 вопроса')\n                        .max(10, 'Не более 10 вепросов')\n                        .typeError('Введите число')\n                        .integer('Так тоже не прокатит')\n                })}\n                onSubmit={(values, {setSubmitting}) => {\n                    setSubmitting(false);\n                    props.setGameParams({...values, themes: []});\n                }}\n            >\n                <Form>\n                    <header>Новая игра</header>\n                    <TextInput\n                        label=\"Название\"\n                        name=\"name\"\n                        type=\"text\"\n                    />\n                    <TextInput\n                        label=\"Количество раундов\"\n                        name=\"rounds_count\"\n                        type=\"text\"\n                    />\n                    <TextInput\n                        label=\"Количество вопросов в теме\"\n                        name=\"questions_count\"\n                        type=\"text\"\n                    />\n\n                    <button type=\"submit\">Создать игру</button>\n                </Form>\n            </Formik>\n        </div>\n    );\n};\n\nconst AddThemeForm = (props) => {\n    return (\n        <Formik\n            initialValues={{\n                name: ''\n            }}\n            validationSchema={Yup.object({\n                name: Yup.string()\n                    .required('Обязательное поле')\n                    .max(20, 'Не более 20 символов')\n            })}\n            onSubmit={(values, {setSubmitting}) => {\n                setSubmitting(false);\n                props.setTheme(values);\n            }}\n        >\n            <Form>\n                <header>Новая тема</header>\n                <TextInput\n                    label=\"Название\"\n                    name=\"name\"\n                    type=\"text\"\n                />\n\n                <button type=\"submit\">Создать тему</button>\n            </Form>\n        </Formik>\n    );\n}\n\nconst Question = (props) => {\n    return (\n        <td\n            className={`question-cell ${props.isSet ? '' : 'empty'}`}\n            onClick={() => props.setQuestion(props.round, props.theme, props.value)}\n        >{props.value}</td>\n\n    )\n}\n\nconst Theme = (props) => {\n    const question_values = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000];\n    console.log('theme_q', props.questions);\n    console.log('theme_q_filter100', props.questions.filter(q =>\n        q.value === (100 * props.round)\n    ).length !== 0);\n    return (\n        <tr>\n            <td\n                key={props.name}\n                className='theme-name'\n            >\n                {props.name}\n            </td>\n            {question_values.slice(0, props.questions_count).map(value => (\n                <Question\n                    key={props.name + value}\n                    round={props.round}\n                    theme={props.name}\n                    value={value * props.round}\n                    setQuestion={props.setQuestion}\n                    isSet={props.questions.filter(q =>\n                        q.value === value * props.round\n                    ).length !== 0\n                    }\n                />\n            ))}\n        </tr>\n    )\n}\n\nconst AddQuestionForm = (props) => {\n    return (\n        <Formik\n            initialValues={props.initialValues}\n            validationSchema={Yup.object({\n                text: Yup.string()\n                    .required('Обязательное поле')\n                    .max(200, 'Не более 200 символов'),\n                answer: Yup.string()\n                    .required('Обязательное поле')\n                    .max(50, 'Не более 50 символов')\n            })}\n            onSubmit={(values, {setSubmitting}) => {\n                setSubmitting(false);\n                props.setQuestion(values);\n            }}\n        >\n            <Form>\n                <header>{props.theme} за {props.value}</header>\n                <TextInput\n                    label=\"Текст вопроса\"\n                    name=\"text\"\n                    type=\"text\"\n                />\n                <TextInput\n                    label=\"Ответ\"\n                    name=\"answer\"\n                    type=\"text\"\n                />\n\n                <button type=\"submit\">Сохранить</button>\n            </Form>\n        </Formik>\n    );\n}\n\nconst AddFinalQuestionForm = (props) => {\n    function isAllRoundsFilled() {\n        for (let round = 1; round < props.rounds_count; round++) {\n            if (!props.themes[round] || props.themes[round].length === 0)\n                return false;\n        }\n        return true;\n    }\n\n    function isAllQuestionsFilled() {\n        for (let round = 1; round < props.rounds_count; round++) {\n            for (let theme of props.themes[round]) {\n                if (props.questions.filter(q =>\n                    q.round === round\n                    && q.theme === theme.name\n                ).length !== Number(props.questions_count))\n                    return false;\n            }\n        }\n        return true;\n    }\n\n    console.log(props.initialValues);\n    return (\n        <Formik\n            initialValues={props.initialValues\n            ?? {\n                text: '',\n                answer: ''\n            }}\n            validationSchema={Yup.object({\n                text: Yup.string()\n                    .required('Обязательное поле')\n                    .max(200, 'Не более 200 символов'),\n                answer: Yup.string()\n                    .required('Обязательное поле')\n                    .max(50, 'Не более 50 символов')\n            })}\n            onSubmit={(values, {setSubmitting, setErrors}) => {\n                props.setFinalQuestion(values);\n                if (isAllRoundsFilled())\n                    if (isAllQuestionsFilled()) {\n                        addGameService.post(props.game_name, props.themes, props.questions)\n                            .then(response => {\n                                setSubmitting(false);\n                                localStorage.removeItem('game');\n                                props.history.push('/games');\n                            })\n                            .catch(error =>\n                                setErrors({'submitError': error.message})\n                            );\n                    } else\n                        setErrors({'submitError': 'Заполните все вопросы'})\n                else\n                    setErrors({'submitError': 'В каждом раунде должны быть темы'})\n\n            }}\n        >\n            <Form>\n                <header>Финальный вопрос</header>\n                <TextInput\n                    label=\"Текст вопроса\"\n                    name=\"text\"\n                    type=\"text\"\n                />\n                <TextInput\n                    label=\"Ответ\"\n                    name=\"answer\"\n                    type=\"text\"\n                />\n\n                <SubmitError name='submitError'/>\n\n                <button type=\"submit\">Сохранить игру</button>\n            </Form>\n        </Formik>\n    );\n}\n\nconst SetRounds = (props) => {\n    const history = useHistory();\n    const [isAddThemeFormOpen, setIsAddThemeFormOpen] = useState(false);\n    const [isAddQuestionFormOpen, setIsAddQuestionFormOpen] = useState(false);\n    const [isAddFinalQuestionFormOpen, setIsAddFinalQuestionFormOpen] = useState(false);\n    const [gameParams, setGameParams] = useState(props.gameParams);\n    const [themes, setThemes] = useState(props.gameParams.themes);\n    const [currentRound, setCurrentRound] = useState(1);\n    const [questions, setQuestions] = useState([]);\n    const [questionParams, setQuestionParams] = useState({index: -1});\n\n    useEffect(() => {\n        console.log(props.savedGame);\n        if (props.savedGame) {\n            setIsAddThemeFormOpen(props.savedGame.modals.isAddThemeFormOpen);\n            setIsAddQuestionFormOpen(props.savedGame.modals.isAddQuestionFormOpen);\n            setIsAddFinalQuestionFormOpen(props.savedGame.modals.isAddFinalQuestionFormOpen);\n            setGameParams(props.savedGame.gameParams);\n            setThemes(props.savedGame.themes);\n            setCurrentRound(props.savedGame.currentRound);\n            setQuestions(props.savedGame.questions);\n            setQuestionParams(props.savedGame.questionParams);\n        }\n    }, []);\n\n    useEffect(() => {\n        const game = {\n            modals: {\n                isAddThemeFormOpen: isAddThemeFormOpen,\n                isAddQuestionFormOpen: isAddQuestionFormOpen,\n                isAddFinalQuestionFormOpen: isAddFinalQuestionFormOpen\n            },\n            gameParams: gameParams,\n            themes: themes,\n            currentRound: currentRound,\n            questions: questions,\n            questionParams: questionParams\n        }\n\n        localStorage.setItem('game', JSON.stringify(game));\n    }, [\n        isAddThemeFormOpen,\n        isAddQuestionFormOpen,\n        isAddFinalQuestionFormOpen,\n        gameParams,\n        themes,\n        currentRound,\n        questions,\n        questionParams\n    ])\n\n    return (\n        <>\n            <header>{toOrdinal(currentRound)} раунд</header>\n\n            <table className=\"round add-game-table\">\n                <tbody>\n                {themes[currentRound] && themes[currentRound].map(theme =>\n                    <Theme key={theme.name}\n                           name={theme.name}\n                           round={currentRound}\n                           questions_count={gameParams.questions_count}\n                           questions={questions.filter(q =>\n                               q.round === currentRound\n                               && q.theme === theme.name\n                           )}\n                           setQuestion={(r, t, v) => {\n                               setQuestionParams({\n                                   round: r,\n                                   theme: t,\n                                   value: v,\n                                   index: questions.findIndex(q =>\n                                       q.round === r\n                                       && q.theme === t\n                                       && q.value === v)\n                               })\n                               setIsAddQuestionFormOpen(true);\n                           }}\n                    />\n                )}\n                </tbody>\n            </table>\n            <div className='button-group'>\n                <button onClick={() => setIsAddThemeFormOpen(true)}>Добавить тему</button>\n            </div>\n\n            <div className='button-group'>\n                <button disabled={currentRound === 1}\n                        onClick={() => setCurrentRound(currentRound === 'final'\n                            ? Number(gameParams.rounds_count) - 1\n                            : currentRound - 1)\n                        }>Предыдущий раунд\n                </button>\n\n                <button onClick={() => {\n                    let nextRound = currentRound + 1;\n                    console.log('nr', nextRound, gameParams.rounds_count);\n                    if (nextRound === Number(gameParams.rounds_count))\n                        setIsAddFinalQuestionFormOpen(true)\n                    else\n                        setCurrentRound(nextRound)\n                }\n\n                }>Следующий раунд\n                </button>\n            </div>\n\n            <Modal\n                className='modal form add-theme'\n                overlayClassName='overlay'\n                isOpen={isAddThemeFormOpen}\n                onRequestClose={() => setIsAddThemeFormOpen(false)}\n                ariaHideApp={false}\n            >\n                <AddThemeForm\n                    setTheme={(theme) => {\n                        if (!themes[currentRound])\n                            themes[currentRound] = [];\n                        themes[currentRound].push(theme);\n                        setIsAddThemeFormOpen(false);\n                        setThemes(themes);\n                    }}/>\n            </Modal>\n\n            <Modal\n                className='modal form add-question'\n                overlayClassName='overlay'\n                isOpen={isAddQuestionFormOpen}\n                onRequestClose={() => setIsAddQuestionFormOpen(false)}\n                ariaHideApp={false}\n            >\n                <AddQuestionForm\n                    theme={questionParams.theme}\n                    value={questionParams.value}\n                    setQuestion={question => {\n                        if (questionParams.index === -1)\n                            questions.push({\n                                round: questionParams.round,\n                                theme: questionParams.theme,\n                                value: questionParams.value,\n                                text: question.text,\n                                answer: question.answer,\n                            })\n                        else {\n                            questions[questionParams.index].text = question.text;\n                            questions[questionParams.index].answer = question.answer;\n                        }\n                        setQuestions(questions);\n                        setIsAddQuestionFormOpen(false);\n                    }}\n                    initialValues={\n                        questionParams.index === -1\n                            ? {\n                                text: '',\n                                answer: ''\n                            }\n                            : {\n                                text: questions[questionParams.index].text,\n                                answer: questions[questionParams.index].answer\n                            }\n                    }\n                />\n            </Modal>\n\n\n            <Modal\n                className='modal form add-final-question'\n                overlayClassName='overlay'\n                isOpen={isAddFinalQuestionFormOpen}\n                onRequestClose={() => setIsAddFinalQuestionFormOpen(false)}\n                ariaHideApp={false}\n            >\n                <AddFinalQuestionForm\n                    game_name={gameParams.name}\n                    rounds_count={gameParams.rounds_count}\n                    questions_count={gameParams.questions_count}\n                    questions={questions}\n                    themes={themes}\n                    initialValues={questions.filter(q => q.theme === 'final')[0]}\n                    history={history}\n                    setFinalQuestion={question => {\n                        let i = questions.findIndex(q => q.theme === 'final');\n                        let newQuestion = {\n                            theme: 'final',\n                            value: 200 * gameParams.rounds_count * gameParams.questions_count,\n                            ...question\n                        }\n                        if (i === -1)\n                            questions.push(newQuestion)\n                        else\n                            questions[i] = newQuestion;\n                        setQuestions(questions);\n                    }}\n                />\n            </Modal>\n        </>\n    );\n}\n\nconst AddGame = () => {\n    const [gameParams, setGameParams] = useState(undefined);\n    const [savedGame, setSavedGame] = useState(undefined);\n\n    useEffect(() => {\n        document.title = 'Добавление игры'\n        setSavedGame(JSON.parse(localStorage.getItem('game')));\n    }, []);\n\n    return (\n        <div className='add-game'>\n            {!(gameParams || savedGame)\n                ? <AddGameForm\n                    setGameParams={setGameParams}\n                />\n                : <SetRounds\n                    gameParams={savedGame ? savedGame.gameParams : gameParams}\n                    savedGame={savedGame}\n                />\n            }\n        </div>\n    )\n\n};\n\nexport default AddGame;",
    "import {useAuth} from \"./auth\";\nimport {Form, Formik} from \"formik\";\nimport * as Yup from \"yup\";\nimport {SubmitError, TextInput} from \"./inputs\";\nimport {UserProfileService} from \"./services\";\nimport {useEffect, useState} from 'react'\n\nconst userProfileService = new UserProfileService()\n\nconst UserProfileForm = () => {\n    const auth = useAuth();\n    const [credentials, setCredentials] = useState({nickname: '', password: ''});\n\n    document.title = 'Профиль пользователя';\n\n    useEffect(() => {\n        userProfileService.get(auth.getUsername())\n            .then(response =>\n                setCredentials({\n                    username: response.data.username,\n                    nickname: response.data.nickname,\n                    password: ''\n                })\n            )\n    }, [auth])\n\n    return (\n        <div className='form'>\n            <Formik\n                enableReinitialize\n                initialValues={credentials}\n                validationSchema={Yup.object({\n                    nickname: Yup.string()\n                        .optional()\n                        .min(2, 'Не менее 2 символов')\n                        .max(25, 'Не более 25 символов'),\n                    password: Yup.string()\n                        .optional()\n                        .min(6, 'Не менее 6 символов')\n                        .max(128, 'Не более 128 символов')\n                })}\n                onSubmit={(values, {setSubmitting, setErrors}) => {\n                    if (values.nickname.length === 0 && values.password.length === 0)\n                        setErrors({'submitError': 'Заполните хотя бы одно поле'})\n                    else\n                        userProfileService.save(credentials.username, values.nickname, values.password)\n                            .then(() =>\n                                setSubmitting(false)\n                            );\n                }}\n            >\n                <Form>\n                    <header>Профиль</header>\n                    <TextInput\n                        label=\"Ник\"\n                        name=\"nickname\"\n                        type=\"text\"\n                    />\n                    <TextInput\n                        label=\"Пароль\"\n                        name=\"password\"\n                        type=\"password\"\n                    />\n\n                    <SubmitError name='submitError'/>\n\n                    <button type=\"submit\">Сохранить</button>\n                </Form>\n            </Formik>\n        </div>\n    );\n};\n\nexport default UserProfileForm;",
    "import './game.css';\nimport './round.css';\nimport {useEffect, useReducer, useState} from \"react\";\nimport Notifier from \"./notifiers\";\nimport {GameSessionService} from \"./services\";\nimport {useHistory, useLocation} from \"react-router-dom\";\nimport {Field, Form, Formik} from \"formik\";\nimport ReactTooltip from 'react-tooltip';\nimport ReactCSSTransitionReplace from 'react-css-transition-replace';\nimport {State, toOrdinal} from \"./utils\";\n\nconst gameSessionService = new GameSessionService();\n\nconst PlayerControls = (props) => {\n    return (\n        <div className='player-controls'>\n            <Formik\n                initialValues={{\n                    answer: '',\n                }}\n                onSubmit={(values, {setSubmitting, resetForm}) => {\n                    if (values.answer?.length > 0) {\n                        gameSessionService.submit_answer(props.id, values.answer);\n                        resetForm();\n                        setSubmitting(false);\n                    }\n                }}\n            >\n                <Form>\n                    <Field id=\"answer\" as='textarea' name=\"answer\" placeholder=\"Введите ответ\"/>\n                    <button type=\"submit\">Ответить</button>\n                </Form>\n            </Formik>\n\n            <button\n                onClick={() => {\n                    gameSessionService.leave(props.id);\n                    localStorage.removeItem('gameSession');\n                    localStorage.removeItem('game_session_id');\n                    props.history.push('/games');\n                }}\n            >\n                Выйти из игры\n            </button>\n        </div>\n    )\n}\n\nconst HostCard = (props) => {\n    let hostText = '';\n    let hostImageURL;\n\n    switch (props.state) {\n        case State.WAITING: {\n            hostText = 'ожидаем игроков';\n            hostImageURL = gameSessionService.get_host_image_url(State.WAITING);\n            break;\n        }\n        case State.ROUND_ENDED:\n        case State.FINAL_ROUND_STARTED:\n        case State.CHOOSING_QUESTION:\n        case State.TIMEOUT: {\n            if (props.state === State.TIMEOUT)\n                hostText = `Правильный ответ: ${props.current_answer.text}. `\n            else if (props.current_answer?.is_correct)\n                hostText = 'Правильно! ';\n\n            if (props.state === State.ROUND_ENDED) {\n                hostText += 'Раунд закончен.';\n                hostImageURL = gameSessionService.get_host_image_url(State.ROUND_STARTED);\n            } else if (props.state === State.FINAL_ROUND_STARTED) {\n                hostText += 'Впереди финальный раунд.';\n                hostImageURL = gameSessionService.get_host_image_url(State.ROUND_STARTED);\n            } else {\n                hostText += `${props.current_player.nickname}, выбирайте вопрос.`;\n                hostImageURL = gameSessionService.get_host_image_url(State.CHOOSING_QUESTION);\n            }\n            break;\n        }\n        case State.ANSWERING: {\n            const t = props.current_question.theme_order;\n            const themeName = props.themes[t].name;\n            const value = props.current_question.value;\n            hostText = `${themeName} за ${value}`;\n            hostImageURL = gameSessionService.get_host_image_url(State.ANSWERING);\n\n            if (props.current_answer.text.length > 0) {\n                hostText = 'Неверно.';\n                hostImageURL = gameSessionService.get_host_image_url('wrong');\n            }\n            break;\n        }\n        case State.FINAL_ROUND: {\n            hostImageURL = gameSessionService.get_host_image_url(State.FINAL_ROUND);\n            hostText = 'Финальный раунд';\n            break;\n        }\n        case State.END_GAME: {\n            const winner = props.players.reduce((a, b) => a.score > b.score ? a : b);\n            hostText = `Победил ${winner.nickname}!`;\n            hostImageURL = gameSessionService.get_host_image_url(State.END_GAME);\n            break;\n        }\n        default: {\n            hostText = '';\n            hostImageURL = gameSessionService.get_host_image_url(State.WAITING);\n        }\n    }\n\n    return (\n        <div className='host-card'>\n            <img\n                src={hostImageURL}\n                alt='host'\n            />\n            <div>\n                {hostText}\n            </div>\n        </div>\n    )\n}\n\n\nconst QuestionScreen = (props) => {\n    //console.log(props.text);\n    return (\n        <div className='question'>\n            {props.text}\n        </div>\n    )\n}\n\nconst QuestionCell = (props) => {\n    const [clicked, setClicked] = useState(false);\n    return (\n        <td className={`question-cell ${props.is_answered ? 'empty' : ''} ${clicked ? 'clicked' : ''}`}\n            onClick={() => {\n                setClicked(true);\n                props.questionChosen(props.theme_order, props.question_order);\n            }}\n        >\n            {props.value}\n        </td>\n    )\n}\nconst Theme = (props) => {\n\n    return (\n        <tr>\n            <td>\n                {props.name}\n            </td>\n            {props.questions.map((question, index) =>\n                <QuestionCell\n                    key={question.value}\n                    value={question.value}\n                    is_answered={question.is_answered}\n                    theme_order={props.theme_order}\n                    question_order={index}\n                    questionChosen={props.questionChosen}\n                />\n            )}\n        </tr>\n\n    )\n}\nconst RoundTable = (props) => {\n\n    return (\n        <table className='round round-table'>\n            <tbody>\n            {props.themes.map((theme, index) =>\n                <Theme\n                    key={theme.name}\n                    name={theme.name}\n                    questions={theme.questions}\n                    theme_order={index}\n                    questionChosen={props.questionChosen}\n                />\n            )}\n            </tbody>\n        </table>\n    )\n}\n\nconst GameScreen = (props) => {\n    return (\n        <ReactCSSTransitionReplace\n            className='game-screen'\n            transitionName=\"game-screen\"\n            transitionEnterTimeout={1000}\n            transitionLeaveTimeout={1000}\n        >\n            {([State.CHOOSING_QUESTION, State.TIMEOUT].includes(props.state))\n                ? <RoundTable\n                    key='table'\n                    themes={props.round.themes}\n                    questionChosen={(theme_order, question_order) => {\n                        gameSessionService.choose_question(props.id, theme_order, question_order);\n                    }}\n                />\n                : <QuestionScreen\n                    key='question'\n                    text={([State.ROUND_STARTED, State.FINAL_ROUND_STARTED].includes(props.state))\n                        ? props.round_text\n                        : props.question_text}\n                />\n\n            }\n        </ReactCSSTransitionReplace>\n    )\n}\n\nconst PlayerCard = (props) => {\n    const [answer, setAnswer] = useState('');\n    let tooltipRef;\n\n    async function wait() {\n        await new Promise(r =>\n            setTimeout(() =>\n                ReactTooltip.hide(tooltipRef), 3000));\n    }\n\n    useEffect(() => {\n        if (props.current_answer.text.length > 0\n            && props.current_answer?.player?.nickname === props.nickname) {\n            setAnswer(props.current_answer.text);\n            ReactTooltip.show(tooltipRef);\n\n            wait();\n        }\n\n    }, [props.current_answer])\n\n    useEffect(() => {\n        setAnswer(props.answer);\n        ReactTooltip.show(tooltipRef);\n        wait()\n    }, [props.answer])\n\n    return (\n        <>\n            <div\n                className='player-card'\n                data-tip\n                data-for={props.nickname + '_tooltip'}\n                ref={ref => tooltipRef = ref}\n            >\n                <img\n                    src={props.avatarURL}\n                    alt={props.nickname}\n                />\n                <div>{props.nickname}</div>\n                <div>{props.score}</div>\n            </div>\n            <ReactTooltip\n                className='tooltip'\n                id={props.nickname + '_tooltip'}\n                effect='solid'\n                delayHide={3000}\n                event='null'\n                getContent={() => answer}\n            >\n            </ReactTooltip>\n        </>\n    )\n}\n\nconst Players = (props) => {\n    return (\n        <div className='players'>\n            {props.players.length > 0 && props.players.map(player =>\n                <PlayerCard\n                    key={player.nickname}\n                    nickname={player.nickname}\n                    score={player.score}\n                    is_playing={player.is_playing}\n                    current_answer={props.current_answer}\n                    answer={player.answer}\n                    avatarURL={gameSessionService.get_avatar_url()}\n                />\n            )}\n        </div>\n    )\n}\n\nfunction not_answered_questions_count(round) {\n    let answered = 0;\n    for (let t of round.themes)\n        answered += t.questions.filter(q => q.is_answered).length;\n\n    const not_answered = round.themes.length * round.themes[0].questions.length - answered;\n    console.log(not_answered);\n    console.log(round.themes.length);\n    console.log(round.themes[0].questions.length);\n    console.log(answered);\n    return not_answered;\n}\n\nfunction reducer(gameSession, [event, data]) {\n    console.log('r', event);\n    switch (event) {\n        case 'init': {\n            return {\n                ...gameSession,\n                ...data,\n                is_initialized: true,\n                state: State.WAITING\n            };\n        }\n        case 'set': {\n            return {\n                ...data\n            };\n        }\n        case 'set_state': {\n            return {\n                ...gameSession,\n                state: data\n            };\n        }\n        case 'clear_current_answer': {\n            return {\n                ...gameSession,\n                current_answer: {text: '', player: {nickname: ''}}\n            };\n        }\n        case 'player_joined': {\n            const index = gameSession.players.findIndex(p => p.nickname === data.nickname);\n            if (index === -1)\n                return {\n                    ...gameSession,\n                    players: gameSession.players.concat(data),\n                    current_players: gameSession.current_players + 1\n                }\n            else\n                return {\n                    ...gameSession,\n                    players: gameSession.players.slice(0, index)\n                        .concat(data\n                            , gameSession.players.slice(index + 1))\n                }\n        }\n        case 'player_left': {\n            const index = gameSession.players.findIndex(p => p.nickname === data.nickname);\n            if (gameSession.state === State.WAITING)\n                return {\n                    ...gameSession,\n                    players: gameSession.players.slice(0, index)\n                        .concat(gameSession.players.slice(index + 1))\n                }\n            else\n                return {\n                    ...gameSession,\n                    players: gameSession.players.slice(0, index)\n                        .concat(data\n                            , gameSession.players.slice(index + 1))\n                }\n        }\n        case 'round_started': {\n            return {\n                ...gameSession,\n                round: data,\n                round_text: toOrdinal(data.order + 1) + ' раунд',\n                state: data.order > 0 ? State.ROUND_ENDED : State.ROUND_STARTED\n            }\n        }\n        case 'final_round_started': {\n            return {\n                ...gameSession,\n                current_question: data,\n                round_text: 'Финальный раунд',\n                state: State.FINAL_ROUND_STARTED\n            }\n        }\n        case 'current_player_chosen': {\n            return {\n                ...gameSession,\n                current_player: data\n                //state: State.CHOOSING_QUESTION\n            }\n        }\n        case 'current_question_chosen': {\n            return {\n                ...gameSession,\n                current_question: data,\n                current_answer: {text: '', player: {nickname: ''}},\n                state: State.ANSWERING\n            }\n        }\n        case 'player_answered': {\n            const t = gameSession.current_question.theme_order;\n            const q = gameSession.current_question.question_order;\n            const playerIndex = gameSession.players.findIndex(p => p.nickname === data.player.nickname);\n            if (data.is_correct)\n                return {\n                    ...gameSession,\n                    current_answer: data,\n                    current_player: data.player,\n                    state: not_answered_questions_count(gameSession.round) === 1\n                        ? gameSession.state\n                        : State.CHOOSING_QUESTION,\n                    round: {\n                        ...gameSession.round,\n                        themes: gameSession.round.themes.slice(0, t)\n                            .concat(\n                                {\n                                    ...gameSession.round.themes[t],\n                                    questions: gameSession.round.themes[t].questions.slice(0, q)\n                                        .concat(\n                                            {\n                                                ...gameSession.round.themes[t].questions[q],\n                                                is_answered: true\n                                            },\n                                            gameSession.round.themes[t].questions.slice(q + 1)\n                                        )\n                                },\n                                gameSession.round.themes.slice(t + 1)\n                            )\n                    },\n                    players: gameSession.players.slice(0, playerIndex)\n                        .concat(data.player,\n                            gameSession.players.slice(playerIndex + 1))\n                }\n            else\n                return {\n                    ...gameSession,\n                    current_answer: data,\n                    players: gameSession.players.slice(0, playerIndex)\n                        .concat(data.player,\n                            gameSession.players.slice(playerIndex + 1))\n                }\n        }\n        case 'question_timeout': {\n            const t = gameSession.current_question.theme_order;\n            const q = gameSession.current_question.question_order;\n            return {\n                ...gameSession,\n                current_answer: data,\n                state: State.TIMEOUT,\n                round: {\n                    ...gameSession.round,\n                    themes: gameSession.round.themes.slice(0, t)\n                        .concat(\n                            {\n                                ...gameSession.round.themes[t],\n                                questions: gameSession.round.themes[t].questions.slice(0, q)\n                                    .concat(\n                                        {\n                                            ...gameSession.round.themes[t].questions[q],\n                                            is_answered: true\n                                        },\n                                        gameSession.round.themes[t].questions.slice(q + 1)\n                                    )\n                            },\n                            gameSession.round.themes.slice(t + 1)\n                        )\n                }\n            }\n        }\n        case 'final_round_timeout': {\n            return {\n                ...gameSession,\n                players: data.players,\n                state: State.END_GAME\n            }\n        }\n        default:\n            throw new Error('нет такого события')\n    }\n}\n\nconst Game = () => {\n    const history = useHistory();\n    const location = useLocation();\n    const [gameSession, dispatch] = useReducer(reducer,\n        {\n            id: -1,\n            current_question: {\n                text: ''\n            },\n            current_answer: {\n                text: '',\n                player: {\n                    nickname: ''\n                }\n            },\n            players: [],\n            round: {\n                order: -1,\n                themes: []\n            }\n        });\n\n    useEffect(() => {\n        document.title = 'Игра'\n\n        const game_session_id = location.state?.id ?? localStorage.getItem('game_session_id');\n        const notifier = new Notifier('game', game_session_id);\n        notifier.setListener(dispatch);\n\n        localStorage.setItem('game_session_id', game_session_id);\n\n        const savedGameSession = JSON.parse(localStorage.getItem('gameSession'));\n        console.log('stor', savedGameSession);\n        if (!savedGameSession?.is_initialized) {\n            console.log('init', location.state);\n            dispatch(['init', location.state]);\n        } else\n            dispatch(['set', savedGameSession]);\n\n        return () => notifier.close();\n\n    }, []);\n\n    useEffect(() => {\n        localStorage.setItem('gameSession', JSON.stringify(gameSession));\n    }, [gameSession]);\n\n\n    useEffect(() => {\n        async function wait(state) {\n            console.log('st', state);\n            await new Promise(r =>\n                setTimeout(() =>\n                    dispatch(['set_state', state]), 3000));\n        }\n\n        if (gameSession.state === State.ROUND_ENDED)\n            wait(State.ROUND_STARTED)\n        else if (gameSession.state === State.ROUND_STARTED) {\n            dispatch(['clear_current_answer', null]);\n            wait(State.CHOOSING_QUESTION)\n        } else if (gameSession.state === State.FINAL_ROUND_STARTED)\n            wait(State.FINAL_ROUND)\n    }, [gameSession.state]);\n\n    return (\n        <div className='game'>\n            {console.log('gsr', gameSession)}\n\n            <GameScreen\n                state={gameSession.state}\n                round={gameSession.round}\n                id={gameSession.id}\n                question_text={gameSession.current_question.text}\n                round_text={gameSession.round_text}\n            />\n\n            <Players\n                players={gameSession.players}\n                current_answer={gameSession.current_answer}\n            />\n\n            <HostCard\n                state={gameSession.state}\n                current_player={gameSession.current_player}\n                current_question={gameSession.current_question}\n                current_answer={gameSession.current_answer}\n                themes={gameSession.round.themes}\n                players={gameSession.players}\n            />\n\n            <PlayerControls\n                id={gameSession.id}\n                history={history}\n            />\n        </div>\n    )\n};\n\nexport default Game",
    "import React, {Fragment} from \"react\";\nimport './App.css'\nimport {RegisterForm} from \"./registration\";\nimport {PrivateRoute, useAuth} from \"./auth\";\nimport LoginForm from \"./login\";\nimport GameList from \"./games\";\nimport Header from \"./header\";\nimport Lobby from \"./lobby\";\nimport AddGame from \"./addGame\";\nimport UserProfileForm from \"./userProfile\";\nimport Game from \"./game\";\n\nimport {BrowserRouter as Router, Redirect, Route, Switch} from \"react-router-dom\";\n\nfunction App() {\n    const auth = useAuth();\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\">\n                    {auth.isAuthenticated ? <Redirect to=\"/games\"/> : <Redirect to=\"/login\"/>}\n                </Route>\n                <Route path=\"/register\">\n                    <RegisterForm/>\n                </Route>\n                <Route path=\"/login\">\n                    <LoginForm/>\n                </Route>\n                <Fragment>\n                    <Header/>\n                    <PrivateRoute exact path=\"/user\">\n                        <UserProfileForm/>\n                    </PrivateRoute>\n                    <PrivateRoute exact path=\"/games\">\n                        <GameList/>\n                    </PrivateRoute>\n                    <PrivateRoute exact path=\"/games/new\">\n                        <AddGame/>\n                    </PrivateRoute>\n                    <PrivateRoute path=\"/lobby\">\n                        <Lobby/>\n                    </PrivateRoute>\n                    <PrivateRoute path=\"/game\">\n                        <Game/>\n                    </PrivateRoute>\n                </Fragment>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n",
    "const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {ProvideAuth} from \"./auth\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <ProvideAuth>\n            <App/>\n        </ProvideAuth>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"
  ],
  "sourceRoot": ""
}